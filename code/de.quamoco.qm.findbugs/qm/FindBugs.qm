<?xml version="1.0" encoding="UTF-8"?>
<qm:QualityModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:qm="http://www.quamoco.de/qm/v14" xmi:id="_i91HYRQNEeChpcWFVNVZLg" name="FindBugs">
  <measures xsi:type="qm:Measure" xmi:id="_pZ7qTBdREeCWcbKUk5fWYg" description="This method contains a useless control flow statement in which control&#xA;flow follows to the same or following line regardless of whether or not&#xA;the branch is taken.&#xA;Often, this is caused by inadvertently using an empty statement as the&#xA;body of an if statement, e.g.:&#xA;&#xA;    if (argv.length == 1);&#xA;        System.out.println(&quot;Hello, &quot; + argv[0]);" name="UCF: Useless control flow to next line">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ7qTRdREeCWcbKUk5fWYg" rule="UCF_USELESS_CONTROL_FLOW_NEXT_LINE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ7qThdREeCWcbKUk5fWYg" description="This method contains a useless control flow statement in which control&#xA;flow follows to the same or following line regardless of whether or not&#xA;the branch is taken.&#xA;Often, this is caused by inadvertently using an empty statement as the&#xA;body of an if statement, e.g.:&#xA;&#xA;    if (argv.length == 1);&#xA;        System.out.println(&quot;Hello, &quot; + argv[0]);" implements="_pZ7qTBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ7qTxdREeCWcbKUk5fWYg" rule="UCF_USELESS_CONTROL_FLOW_NEXT_LINE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ7qVBdREeCWcbKUk5fWYg" description="A call to getXXX or updateXXX methods of a result set was made where the&#xA;field index is 0. As ResultSet fields start at index 1, this is always a mistake." name="SQL: Method attempts to access a result set field with index 0">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ7qVRdREeCWcbKUk5fWYg" rule="SQL_BAD_RESULTSET_ACCESS"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ7qVhdREeCWcbKUk5fWYg" description="A call to getXXX or updateXXX methods of a result set was made where the&#xA;field index is 0. As ResultSet fields start at index 1, this is always a mistake." implements="_pZ7qVBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ7qVxdREeCWcbKUk5fWYg" rule="SQL_BAD_RESULTSET_ACCESS"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ7qWBdREeCWcbKUk5fWYg" description="The code invokes toString on an array, which will generate a fairly useless result&#xA;such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable&#xA;String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12." name="USELESS_STRING: Invocation of toString on an array">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ7qWRdREeCWcbKUk5fWYg" rule="DMI_INVOKING_TOSTRING_ON_ARRAY"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ7qWhdREeCWcbKUk5fWYg" description="The code invokes toString on an array, which will generate a fairly useless result&#xA;such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable&#xA;String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12." implements="_pZ7qWBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ7qWxdREeCWcbKUk5fWYg" rule="DMI_INVOKING_TOSTRING_ON_ARRAY"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ7qYBdREeCWcbKUk5fWYg" description="A mutable static field could be changed by malicious code or&#xA;   by accident.&#xA;   The field could be made package protected to avoid&#xA;   this vulnerability." name="MS: Field should be package protected">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ7qYRdREeCWcbKUk5fWYg" rule="MS_PKGPROTECT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ7qYhdREeCWcbKUk5fWYg" description="A mutable static field could be changed by malicious code or&#xA;   by accident.&#xA;   The field could be made package protected to avoid&#xA;   this vulnerability." implements="_pZ7qYBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ7qYxdREeCWcbKUk5fWYg" rule="MS_PKGPROTECT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ7qZBdREeCWcbKUk5fWYg" description="This identifier is used as a keyword in later versions of Java. This code, and &#xA;any code that references this API, &#xA;will need to be changed in order to compile it in later versions of Java." name="Nm: Use of identifier that is a keyword in later versions of Java">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ7qZRdREeCWcbKUk5fWYg" rule="NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ7qZhdREeCWcbKUk5fWYg" description="This identifier is used as a keyword in later versions of Java. This code, and &#xA;any code that references this API, &#xA;will need to be changed in order to compile it in later versions of Java." implements="_pZ7qZBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ7qZxdREeCWcbKUk5fWYg" rule="NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ7qaBdREeCWcbKUk5fWYg" description="A call to notify() or notifyAll()&#xA;  was made without any (apparent) accompanying&#xA;  modification to mutable object state.&amp;nbsp; In general, calling a notify&#xA;  method on a monitor is done because some condition another thread is&#xA;  waiting for has become true.&amp;nbsp; However, for the condition to be meaningful,&#xA;  it must involve a heap object that is visible to both threads.&#xA;&#xA;   This bug does not necessarily indicate an error, since the change to&#xA;  mutable object state may have taken place in a method which then called&#xA;  the method containing the notification." name="NN: Naked notify">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ7qaRdREeCWcbKUk5fWYg" rule="NN_NAKED_NOTIFY"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ7qahdREeCWcbKUk5fWYg" description="A call to notify() or notifyAll()&#xA;  was made without any (apparent) accompanying&#xA;  modification to mutable object state.&amp;nbsp; In general, calling a notify&#xA;  method on a monitor is done because some condition another thread is&#xA;  waiting for has become true.&amp;nbsp; However, for the condition to be meaningful,&#xA;  it must involve a heap object that is visible to both threads.&#xA;&#xA;   This bug does not necessarily indicate an error, since the change to&#xA;  mutable object state may have taken place in a method which then called&#xA;  the method containing the notification." implements="_pZ7qaBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ7qaxdREeCWcbKUk5fWYg" rule="NN_NAKED_NOTIFY"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ7qbBdREeCWcbKUk5fWYg" description="A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen.&#xA;&#x9;This method can be invoked as though it returned a value of type boolean, and&#xA;&#x9;the compiler will insert automatic unboxing of the Boolean value. If a null value is returned,&#xA;&#x9;this will result in a NullPointerException." name="NP: Method with Boolean return type returns explicit null">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ7qbRdREeCWcbKUk5fWYg" rule="NP_BOOLEAN_RETURN_NULL"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ7qbhdREeCWcbKUk5fWYg" description="A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen.&#xA;&#x9;This method can be invoked as though it returned a value of type boolean, and&#xA;&#x9;the compiler will insert automatic unboxing of the Boolean value. If a null value is returned,&#xA;&#x9;this will result in a NullPointerException." implements="_pZ7qbBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ7qbxdREeCWcbKUk5fWYg" rule="NP_BOOLEAN_RETURN_NULL"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ8RUBdREeCWcbKUk5fWYg" description="This code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting&#xA;vulnerability. See http://en.wikipedia.org/wiki/Cross-site_scripting&#xA;for more information.&#xA;FindBugs looks only for the most blatant, obvious cases of cross site scripting.&#xA;If FindBugs found any, you almost certainly have more cross site scripting&#xA;vulnerabilities that FindBugs doesn't report. If you are concerned about cross site scripting, you should seriously &#xA;consider using a commercial static analysis or pen-testing tool." name="XSS: JSP reflected cross site scripting vulnerability">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RURdREeCWcbKUk5fWYg" rule="XSS_REQUEST_PARAMETER_TO_JSP_WRITER"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ8RUhdREeCWcbKUk5fWYg" description="This code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting&#xA;vulnerability. See http://en.wikipedia.org/wiki/Cross-site_scripting&#xA;for more information.&#xA;FindBugs looks only for the most blatant, obvious cases of cross site scripting.&#xA;If FindBugs found any, you almost certainly have more cross site scripting&#xA;vulnerabilities that FindBugs doesn't report. If you are concerned about cross site scripting, you should seriously &#xA;consider using a commercial static analysis or pen-testing tool." implements="_pZ8RUBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RUxdREeCWcbKUk5fWYg" rule="XSS_REQUEST_PARAMETER_TO_JSP_WRITER"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ8RWBdREeCWcbKUk5fWYg" description="This method may fail to clean up (close, dispose of) a stream,&#xA;&#x9;&#x9;  database object, or other&#xA;&#x9;&#x9;  resource requiring an explicit cleanup operation.&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  In general, if a method opens a stream or other resource,&#xA;&#x9;&#x9;  the method should use a try/finally block to ensure that&#xA;&#x9;&#x9;  the stream or resource is cleaned up before the method&#xA;&#x9;&#x9;  returns.&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  This bug pattern is essentially the same as the&#xA;&#x9;&#x9;  OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE&#xA;&#x9;&#x9;  bug patterns, but is based on a different&#xA;&#x9;&#x9;  (and hopefully better) static analysis technique.&#xA;&#x9;&#x9;  We are interested is getting feedback about the&#xA;&#x9;&#x9;  usefulness of this bug pattern.&#xA;&#x9;&#x9;  To send feedback, either:&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;send email to findbugs@cs.umd.edu&#xA;&#x9;&#x9;&#x9;file a bug report: http://findbugs.sourceforge.net/reportingBugs.html&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  In particular,&#xA;&#x9;&#x9;  the false-positive suppression heuristics for this&#xA;&#x9;&#x9;  bug pattern have not been extensively tuned, so&#xA;&#x9;&#x9;  reports about false positives are helpful to us.&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for&#xA;&#x9;&#x9;  a description of the analysis technique." name="OBL: Method may fail to clean up stream or resource">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RWRdREeCWcbKUk5fWYg" rule="OBL_UNSATISFIED_OBLIGATION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ8RWhdREeCWcbKUk5fWYg" description="This method may fail to clean up (close, dispose of) a stream,&#xA;&#x9;&#x9;  database object, or other&#xA;&#x9;&#x9;  resource requiring an explicit cleanup operation.&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  In general, if a method opens a stream or other resource,&#xA;&#x9;&#x9;  the method should use a try/finally block to ensure that&#xA;&#x9;&#x9;  the stream or resource is cleaned up before the method&#xA;&#x9;&#x9;  returns.&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  This bug pattern is essentially the same as the&#xA;&#x9;&#x9;  OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE&#xA;&#x9;&#x9;  bug patterns, but is based on a different&#xA;&#x9;&#x9;  (and hopefully better) static analysis technique.&#xA;&#x9;&#x9;  We are interested is getting feedback about the&#xA;&#x9;&#x9;  usefulness of this bug pattern.&#xA;&#x9;&#x9;  To send feedback, either:&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;send email to findbugs@cs.umd.edu&#xA;&#x9;&#x9;&#x9;file a bug report: http://findbugs.sourceforge.net/reportingBugs.html&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  In particular,&#xA;&#x9;&#x9;  the false-positive suppression heuristics for this&#xA;&#x9;&#x9;  bug pattern have not been extensively tuned, so&#xA;&#x9;&#x9;  reports about false positives are helpful to us.&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for&#xA;&#x9;&#x9;  a description of the analysis technique." implements="_pZ8RWBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RWxdREeCWcbKUk5fWYg" rule="OBL_UNSATISFIED_OBLIGATION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ8RXBdREeCWcbKUk5fWYg" description="This method compares two reference values using the == or != operator,&#xA;where the correct way to compare instances of this type is generally&#xA;with the equals() method. &#xA;It is possible to create distinct instances that are equal but do not compare as == since&#xA;they are different objects.&#xA;Examples of classes which should generally&#xA;not be compared by reference are java.lang.Integer, java.lang.Float, etc." name="RC: Suspicious reference comparison">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RXRdREeCWcbKUk5fWYg" rule="RC_REF_COMPARISON"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ8RXhdREeCWcbKUk5fWYg" description="This method compares two reference values using the == or != operator,&#xA;where the correct way to compare instances of this type is generally&#xA;with the equals() method. &#xA;It is possible to create distinct instances that are equal but do not compare as == since&#xA;they are different objects.&#xA;Examples of classes which should generally&#xA;not be compared by reference are java.lang.Integer, java.lang.Float, etc." implements="_pZ8RXBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RXxdREeCWcbKUk5fWYg" rule="RC_REF_COMPARISON"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ8RYBdREeCWcbKUk5fWYg" description="This implementation of equals(Object) violates the contract defined&#xA;      by java.lang.Object.equals() because it does not check for null&#xA;      being passed as the argument.  All equals() methods should return&#xA;      false if passed a null value." name="NP: equals() method does not check for null argument">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RYRdREeCWcbKUk5fWYg" rule="NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ8RYhdREeCWcbKUk5fWYg" description="This implementation of equals(Object) violates the contract defined&#xA;      by java.lang.Object.equals() because it does not check for null&#xA;      being passed as the argument.  All equals() methods should return&#xA;      false if passed a null value." implements="_pZ8RYBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RYxdREeCWcbKUk5fWYg" rule="NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ8RaBdREeCWcbKUk5fWYg" description="This instance method synchronizes on this.getClass(). If this class is subclassed,&#xA;     subclasses will synchronize on the class object for the subclass, which isn't likely what was intended.&#xA;     For example, consider this code from java.awt.Label:&#xA;     &#xA;     private static final String base = &quot;label&quot;;&#xA;     private static int nameCounter = 0;&#xA;     String constructComponentName() {&#xA;        synchronized (getClass()) {&#xA;            return base + nameCounter++;&#xA;        }&#xA;     }&#xA;     &#xA;     Subclasses of Label won't synchronize on the same subclass, giving rise to a datarace.&#xA;     Instead, this code should be synchronizing on Label.class&#xA;      &#xA;     private static final String base = &quot;label&quot;;&#xA;     private static int nameCounter = 0;&#xA;     String constructComponentName() {&#xA;        synchronized (Label.class) {&#xA;            return base + nameCounter++;&#xA;        }&#xA;     }&#xA;     &#xA;      Bug pattern contributed by Jason Mehrens" name="WL: Sychronization on getClass rather than class literal">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RaRdREeCWcbKUk5fWYg" rule="WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ8RahdREeCWcbKUk5fWYg" description="This instance method synchronizes on this.getClass(). If this class is subclassed,&#xA;     subclasses will synchronize on the class object for the subclass, which isn't likely what was intended.&#xA;     For example, consider this code from java.awt.Label:&#xA;     &#xA;     private static final String base = &quot;label&quot;;&#xA;     private static int nameCounter = 0;&#xA;     String constructComponentName() {&#xA;        synchronized (getClass()) {&#xA;            return base + nameCounter++;&#xA;        }&#xA;     }&#xA;     &#xA;     Subclasses of Label won't synchronize on the same subclass, giving rise to a datarace.&#xA;     Instead, this code should be synchronizing on Label.class&#xA;      &#xA;     private static final String base = &quot;label&quot;;&#xA;     private static int nameCounter = 0;&#xA;     String constructComponentName() {&#xA;        synchronized (Label.class) {&#xA;            return base + nameCounter++;&#xA;        }&#xA;     }&#xA;     &#xA;      Bug pattern contributed by Jason Mehrens" implements="_pZ8RaBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RaxdREeCWcbKUk5fWYg" rule="WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ8RbBdREeCWcbKUk5fWYg" description="The value returned by readLine is discarded after checking to see if the return&#xA;value is non-null. In almost all situations, if the result is non-null, you will want&#xA;to use that non-null value. Calling readLine again will give you a different line." name="RV: Method discards result of readLine after checking if it is nonnull">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RbRdREeCWcbKUk5fWYg" rule="RV_DONT_JUST_NULL_CHECK_READLINE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ8RbhdREeCWcbKUk5fWYg" description="The value returned by readLine is discarded after checking to see if the return&#xA;value is non-null. In almost all situations, if the result is non-null, you will want&#xA;to use that non-null value. Calling readLine again will give you a different line." implements="_pZ8RbBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RbxdREeCWcbKUk5fWYg" rule="RV_DONT_JUST_NULL_CHECK_READLINE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ8RcBdREeCWcbKUk5fWYg" description="A value that is annotated as possibility not being an instance of&#xA;&#x9;the values denoted by the type qualifier, and the value is guaranteed to be used&#xA;&#x9;in a way that requires values denoted by that type qualifier." name="TQ: Value that might not carry a type qualifier is always used in a way requires that type qualifier">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RcRdREeCWcbKUk5fWYg" rule="TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ8RchdREeCWcbKUk5fWYg" description="A value that is annotated as possibility not being an instance of&#xA;&#x9;the values denoted by the type qualifier, and the value is guaranteed to be used&#xA;&#x9;in a way that requires values denoted by that type qualifier." implements="_pZ8RcBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RcxdREeCWcbKUk5fWYg" rule="TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ8RdBdREeCWcbKUk5fWYg" description="A value is used in a way that requires it to be never be a value denoted by a type qualifier, but&#xA;&#x9;there is an explicit annotation stating that it is not known where the value is prohibited from having that type qualifier.&#xA;&#x9;Either the usage or the annotation is incorrect." name="TQ: Explicit annotation inconsistent with use">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RdRdREeCWcbKUk5fWYg" rule="TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ8RdhdREeCWcbKUk5fWYg" description="A value is used in a way that requires it to be never be a value denoted by a type qualifier, but&#xA;&#x9;there is an explicit annotation stating that it is not known where the value is prohibited from having that type qualifier.&#xA;&#x9;Either the usage or the annotation is incorrect." implements="_pZ8RdBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RdxdREeCWcbKUk5fWYg" rule="TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ8RfBdREeCWcbKUk5fWYg" description="The return value from a method is dereferenced without a null check,&#xA;and the return value of that method is one that should generally be checked&#xA;for null.  This may lead to a NullPointerException when the code is executed." name="NP: Possible null pointer dereference due to return value of called method">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RfRdREeCWcbKUk5fWYg" rule="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ8RfhdREeCWcbKUk5fWYg" description="The return value from a method is dereferenced without a null check,&#xA;and the return value of that method is one that should generally be checked&#xA;for null.  This may lead to a NullPointerException when the code is executed." implements="_pZ8RfBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RfxdREeCWcbKUk5fWYg" rule="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ8RgBdREeCWcbKUk5fWYg" description="A random value from 0 to 1 is being coerced to the integer value 0. You probably&#xA;want to multiple the random value by something else before coercing it to an integer, or use the Random.nextInt(n) method." name="RV: Random value from 0 to 1 is coerced to the integer 0">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RgRdREeCWcbKUk5fWYg" rule="RV_01_TO_INT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ8RghdREeCWcbKUk5fWYg" description="A random value from 0 to 1 is being coerced to the integer value 0. You probably&#xA;want to multiple the random value by something else before coercing it to an integer, or use the Random.nextInt(n) method." implements="_pZ8RgBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RgxdREeCWcbKUk5fWYg" rule="RV_01_TO_INT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ8RhBdREeCWcbKUk5fWYg" description="The putIfAbsent method is typically used to ensure that a &#xA;&#x9;&#x9;single value is associated with a given key (the first value for which put &#xA;&#x9;&#x9;if absent succeeds).  &#xA;&#x9;&#x9;If you ignore the return value and retain a reference to the value passed in, &#xA;&#x9;&#x9;you run the risk of retaining a value that is not the one that is associated with the key in the map.  &#xA;&#x9;&#x9;If it matters which one you use and you use the one that isn't stored in the map,&#xA;&#x9;&#x9;your program will behave incorrectly." name="RV: Return value of putIfAbsent ignored, value passed to putIfAbsent reused">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RhRdREeCWcbKUk5fWYg" rule="RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ8RhhdREeCWcbKUk5fWYg" description="The putIfAbsent method is typically used to ensure that a &#xA;&#x9;&#x9;single value is associated with a given key (the first value for which put &#xA;&#x9;&#x9;if absent succeeds).  &#xA;&#x9;&#x9;If you ignore the return value and retain a reference to the value passed in, &#xA;&#x9;&#x9;you run the risk of retaining a value that is not the one that is associated with the key in the map.  &#xA;&#x9;&#x9;If it matters which one you use and you use the one that isn't stored in the map,&#xA;&#x9;&#x9;your program will behave incorrectly." implements="_pZ8RhBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RhxdREeCWcbKUk5fWYg" rule="RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ8RiBdREeCWcbKUk5fWYg" description="Type check performed using the instanceof operator where it can be statically determined whether the object&#xA;is of the type requested." name="SIO: Unnecessary type check done using instanceof operator">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RiRdREeCWcbKUk5fWYg" rule="SIO_SUPERFLUOUS_INSTANCEOF"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ8RihdREeCWcbKUk5fWYg" description="Type check performed using the instanceof operator where it can be statically determined whether the object&#xA;is of the type requested." implements="_pZ8RiBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ8RixdREeCWcbKUk5fWYg" rule="SIO_SUPERFLUOUS_INSTANCEOF"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ84YBdREeCWcbKUk5fWYg" description="The method creates an IO stream object, does not assign it to any&#xA;fields, pass it to other methods, or return it, and does not appear to close&#xA;it on all possible exception paths out of the method.&amp;nbsp;&#xA;This may result in a file descriptor leak.&amp;nbsp; It is generally a good&#xA;idea to use a finally block to ensure that streams are&#xA;closed." name="OS: Method may fail to close stream on exception">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84YRdREeCWcbKUk5fWYg" rule="OS_OPEN_STREAM_EXCEPTION_PATH"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ84YhdREeCWcbKUk5fWYg" description="The method creates an IO stream object, does not assign it to any&#xA;fields, pass it to other methods, or return it, and does not appear to close&#xA;it on all possible exception paths out of the method.&amp;nbsp;&#xA;This may result in a file descriptor leak.&amp;nbsp; It is generally a good&#xA;idea to use a finally block to ensure that streams are&#xA;closed." implements="_pZ84YBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84YxdREeCWcbKUk5fWYg" rule="OS_OPEN_STREAM_EXCEPTION_PATH"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ84aBdREeCWcbKUk5fWYg" description="This class is an inner class, but should probably be a static inner class.&#xA;  As it is, there is a serious danger of a deadly embrace between the inner class&#xA;  and the thread local in the outer class. Because the inner class isn't static,&#xA;  it retains a reference to the outer class. &#xA;  If the thread local contains a reference to an instance of the inner&#xA;  class, the inner and outer instance will both be reachable&#xA;  and not eligible for garbage collection." name="SIC: Deadly embrace of non-static inner class and thread local">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84aRdREeCWcbKUk5fWYg" rule="SIC_THREADLOCAL_DEADLY_EMBRACE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ84ahdREeCWcbKUk5fWYg" description="This class is an inner class, but should probably be a static inner class.&#xA;  As it is, there is a serious danger of a deadly embrace between the inner class&#xA;  and the thread local in the outer class. Because the inner class isn't static,&#xA;  it retains a reference to the outer class. &#xA;  If the thread local contains a reference to an instance of the inner&#xA;  class, the inner and outer instance will both be reachable&#xA;  and not eligible for garbage collection." implements="_pZ84aBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84axdREeCWcbKUk5fWYg" rule="SIC_THREADLOCAL_DEADLY_EMBRACE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ84bBdREeCWcbKUk5fWYg" description="This method contains a switch statement where one case branch will fall through to the next case.&#xA;  Usually you need to end this case with a break or return." name="SF: Switch statement found where one case falls through to the next case">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84bRdREeCWcbKUk5fWYg" rule="SF_SWITCH_FALLTHROUGH"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ84bhdREeCWcbKUk5fWYg" description="This method contains a switch statement where one case branch will fall through to the next case.&#xA;  Usually you need to end this case with a break or return." implements="_pZ84bBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84bxdREeCWcbKUk5fWYg" rule="SF_SWITCH_FALLTHROUGH"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ84dBdREeCWcbKUk5fWYg" description="This class implements the Externalizable interface, but does&#xA;  not define a void constructor. When Externalizable objects are deserialized,&#xA;   they first need to be constructed by invoking the void&#xA;   constructor. Since this class does not have one,&#xA;   serialization and deserialization will fail at runtime." name="Se: Class is Externalizable but doesn't define a void constructor">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84dRdREeCWcbKUk5fWYg" rule="SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ84dhdREeCWcbKUk5fWYg" description="This class implements the Externalizable interface, but does&#xA;  not define a void constructor. When Externalizable objects are deserialized,&#xA;   they first need to be constructed by invoking the void&#xA;   constructor. Since this class does not have one,&#xA;   serialization and deserialization will fail at runtime." implements="_pZ84dBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84dxdREeCWcbKUk5fWYg" rule="SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ84eBdREeCWcbKUk5fWYg" description="This class implements the Serializable interface, and defines a method&#xA;  for custom serialization/deserialization. But since that method isn't declared private,&#xA;  it will be silently ignored by the serialization/deserialization API." name="Se: Method must be private in order for serialization to work">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84eRdREeCWcbKUk5fWYg" rule="SE_METHOD_MUST_BE_PRIVATE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ84ehdREeCWcbKUk5fWYg" description="This class implements the Serializable interface, and defines a method&#xA;  for custom serialization/deserialization. But since that method isn't declared private,&#xA;  it will be silently ignored by the serialization/deserialization API." implements="_pZ84eBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84exdREeCWcbKUk5fWYg" rule="SE_METHOD_MUST_BE_PRIVATE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ84fBdREeCWcbKUk5fWYg" description="This class implements the Comparator interface. You&#xA;should consider whether or not it should also implement the Serializable&#xA;interface. If a comparator is used to construct an ordered collection&#xA;such as a TreeMap, then the TreeMap&#xA;will be serializable only if the comparator is also serializable.&#xA;As most comparators have little or no state, making them serializable&#xA;is generally easy and good defensive programming." name="Se: Comparator doesn't implement Serializable">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84fRdREeCWcbKUk5fWYg" rule="SE_COMPARATOR_SHOULD_BE_SERIALIZABLE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ84fhdREeCWcbKUk5fWYg" description="This class implements the Comparator interface. You&#xA;should consider whether or not it should also implement the Serializable&#xA;interface. If a comparator is used to construct an ordered collection&#xA;such as a TreeMap, then the TreeMap&#xA;will be serializable only if the comparator is also serializable.&#xA;As most comparators have little or no state, making them serializable&#xA;is generally easy and good defensive programming." implements="_pZ84fBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84fxdREeCWcbKUk5fWYg" rule="SE_COMPARATOR_SHOULD_BE_SERIALIZABLE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ84hBdREeCWcbKUk5fWYg" description="This method contains a self assignment of a field; e.g.&#xA;&#xA;&#xA;  int x;&#xA;  public void foo() {&#xA;    x = x;&#xA;  }&#xA;&#xA;Such assignments are useless, and may indicate a logic error or typo." name="SA: Self assignment of field">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84hRdREeCWcbKUk5fWYg" rule="SA_FIELD_SELF_ASSIGNMENT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ84hhdREeCWcbKUk5fWYg" description="This method contains a self assignment of a field; e.g.&#xA;&#xA;&#xA;  int x;&#xA;  public void foo() {&#xA;    x = x;&#xA;  }&#xA;&#xA;Such assignments are useless, and may indicate a logic error or typo." implements="_pZ84hBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84hxdREeCWcbKUk5fWYg" rule="SA_FIELD_SELF_ASSIGNMENT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ84jBdREeCWcbKUk5fWYg" description="One of the arguments being formatted with a format string is an array. This will be formatted&#xA;using a fairly useless format, such as [I@304282, which doesn't actually show the contents&#xA;of the array.&#xA;Consider wrapping the array using Arrays.asList(...) before handling it off to a formatted." name="USELESS_STRING: Array formatted in useless way using format string">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84jRdREeCWcbKUk5fWYg" rule="VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ84jhdREeCWcbKUk5fWYg" description="One of the arguments being formatted with a format string is an array. This will be formatted&#xA;using a fairly useless format, such as [I@304282, which doesn't actually show the contents&#xA;of the array.&#xA;Consider wrapping the array using Arrays.asList(...) before handling it off to a formatted." implements="_pZ84jBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84jxdREeCWcbKUk5fWYg" rule="VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ84mBdREeCWcbKUk5fWYg" description="This method contains a call to java.lang.Object.wait()&#xA;  which is not in a loop.&amp;nbsp; If the monitor is used for multiple conditions,&#xA;  the condition the caller intended to wait for might not be the one&#xA;  that actually occurred." name="Wa: Wait not in loop">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84mRdREeCWcbKUk5fWYg" rule="WA_NOT_IN_LOOP"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ84mhdREeCWcbKUk5fWYg" description="This method contains a call to java.lang.Object.wait()&#xA;  which is not in a loop.&amp;nbsp; If the monitor is used for multiple conditions,&#xA;  the condition the caller intended to wait for might not be the one&#xA;  that actually occurred." implements="_pZ84mBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84mxdREeCWcbKUk5fWYg" rule="WA_NOT_IN_LOOP"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ84nBdREeCWcbKUk5fWYg" description="This method calls Thread.sleep() with a lock held.  This may result&#xA;      in very poor performance and scalability, or a deadlock, since other threads may&#xA;      be waiting to acquire the lock.  It is a much better idea to call&#xA;      wait() on the lock, which releases the lock and allows other threads&#xA;      to run." name="SWL: Method calls Thread.sleep() with a lock held">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ84nRdREeCWcbKUk5fWYg" rule="SWL_SLEEP_WITH_LOCK_HELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ84nhdREeCWcbKUk5fWYg" description="This method calls Thread.sleep() with a lock held.  This may result&#xA;      in very poor performance and scalability, or a deadlock, since other threads may&#xA;      be waiting to acquire the lock.  It is a much better idea to call&#xA;      wait() on the lock, which releases the lock and allows other threads&#xA;      to run." implements="_pZ84nBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9fcBdREeCWcbKUk5fWYg" rule="SWL_SLEEP_WITH_LOCK_HELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ9fdRdREeCWcbKUk5fWYg" description="This code generates a hashcode and then computes&#xA;the absolute value of that hashcode.  If the hashcode &#xA;is Integer.MIN_VALUE, then the result will be negative as well (since &#xA;Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE).&#xA;&#xA;One out of 2^32 strings have a hashCode of Integer.MIN_VALUE,&#xA;including &quot;polygenelubricants&quot; &quot;GydZG_&quot; and &quot;&quot;DESIGNING WORKHOUSES&quot;." name="RV: Bad attempt to compute absolute value of signed 32-bit hashcode">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9fdhdREeCWcbKUk5fWYg" rule="RV_ABSOLUTE_VALUE_OF_HASHCODE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ9fdxdREeCWcbKUk5fWYg" description="This code generates a hashcode and then computes&#xA;the absolute value of that hashcode.  If the hashcode &#xA;is Integer.MIN_VALUE, then the result will be negative as well (since &#xA;Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE).&#xA;&#xA;One out of 2^32 strings have a hashCode of Integer.MIN_VALUE,&#xA;including &quot;polygenelubricants&quot; &quot;GydZG_&quot; and &quot;&quot;DESIGNING WORKHOUSES&quot;." implements="_pZ9fdRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9feBdREeCWcbKUk5fWYg" rule="RV_ABSOLUTE_VALUE_OF_HASHCODE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ9feRdREeCWcbKUk5fWYg" description="This method call passes a null value for a nonnull method parameter.&#xA;&#x9;Either the parameter is annotated as a parameter that should&#xA;&#x9;always be nonnull, or analysis has shown that it will always be &#xA;&#x9;dereferenced." name="NP: Method call passes null for nonnull parameter">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9fehdREeCWcbKUk5fWYg" rule="NP_NULL_PARAM_DEREF"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ9fexdREeCWcbKUk5fWYg" description="This method call passes a null value for a nonnull method parameter.&#xA;&#x9;Either the parameter is annotated as a parameter that should&#xA;&#x9;always be nonnull, or analysis has shown that it will always be &#xA;&#x9;dereferenced." implements="_pZ9feRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9ffBdREeCWcbKUk5fWYg" rule="NP_NULL_PARAM_DEREF"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ9fgRdREeCWcbKUk5fWYg" description="This method synchronizes on a field in what appears to be an attempt&#xA;to guard against simultaneous updates to that field. But guarding a field&#xA;gets a lock on the referenced object, not on the field. This may not &#xA;provide the mutual exclusion you need, and other threads might &#xA;be obtaining locks on the referenced objects (for other purposes). An example&#xA;of this pattern would be:&#xA;&#xA;&#xA;private Long myNtfSeqNbrCounter = new Long(0);&#xA;private Long getNotificationSequenceNumber() {&#xA;     Long result = null;&#xA;     synchronized(myNtfSeqNbrCounter) {&#xA;         result = new Long(myNtfSeqNbrCounter.longValue() + 1);&#xA;         myNtfSeqNbrCounter = new Long(result.longValue());&#xA;     }&#xA;     return result;&#xA; }" name="ML: Synchronization on field in futile attempt to guard that field">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9fghdREeCWcbKUk5fWYg" rule="ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ9fgxdREeCWcbKUk5fWYg" description="This method synchronizes on a field in what appears to be an attempt&#xA;to guard against simultaneous updates to that field. But guarding a field&#xA;gets a lock on the referenced object, not on the field. This may not &#xA;provide the mutual exclusion you need, and other threads might &#xA;be obtaining locks on the referenced objects (for other purposes). An example&#xA;of this pattern would be:&#xA;&#xA;&#xA;private Long myNtfSeqNbrCounter = new Long(0);&#xA;private Long getNotificationSequenceNumber() {&#xA;     Long result = null;&#xA;     synchronized(myNtfSeqNbrCounter) {&#xA;         result = new Long(myNtfSeqNbrCounter.longValue() + 1);&#xA;         myNtfSeqNbrCounter = new Long(result.longValue());&#xA;     }&#xA;     return result;&#xA; }" implements="_pZ9fgRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9fhBdREeCWcbKUk5fWYg" rule="ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ9fjRdREeCWcbKUk5fWYg" description="This class defines a serialVersionUID field that is not static.&amp;nbsp;&#xA;  The field should be made static&#xA;   if it is intended to specify&#xA;   the version UID for purposes of serialization." name="Se: serialVersionUID isn't static">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9fjhdREeCWcbKUk5fWYg" rule="SE_NONSTATIC_SERIALVERSIONID"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ9fjxdREeCWcbKUk5fWYg" description="This class defines a serialVersionUID field that is not static.&amp;nbsp;&#xA;  The field should be made static&#xA;   if it is intended to specify&#xA;   the version UID for purposes of serialization." implements="_pZ9fjRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9fkBdREeCWcbKUk5fWYg" rule="SE_NONSTATIC_SERIALVERSIONID"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ9flRdREeCWcbKUk5fWYg" description="This field is never written.&amp;nbsp; All reads of it will return the default&#xA;value. Check for errors (should it have been initialized?), or remove it if it is useless." name="UwF: Unwritten field">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9flhdREeCWcbKUk5fWYg" rule="UWF_UNWRITTEN_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ9flxdREeCWcbKUk5fWYg" description="This field is never written.&amp;nbsp; All reads of it will return the default&#xA;value. Check for errors (should it have been initialized?), or remove it if it is useless." implements="_pZ9flRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9fmBdREeCWcbKUk5fWYg" rule="UWF_UNWRITTEN_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ9fnRdREeCWcbKUk5fWYg" description="This method contains a redundant check of a known null value against&#xA;the constant null." name="RCN: Redundant nullcheck of value known to be null">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9fnhdREeCWcbKUk5fWYg" rule="RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ9fnxdREeCWcbKUk5fWYg" description="This method contains a redundant check of a known null value against&#xA;the constant null." implements="_pZ9fnRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9foBdREeCWcbKUk5fWYg" rule="RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ9fpRdREeCWcbKUk5fWYg" description="This method performs a nonsensical computation of a field with another&#xA;reference to the same field (e.g., x&amp;x or x-x). Because of the nature&#xA;of the computation, this operation doesn't seem to make sense,&#xA;and may indicate a typo or&#xA;a logic error.  Double check the computation." name="SA: Nonsensical self computation involving a field (e.g., x &amp; x)">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9fphdREeCWcbKUk5fWYg" rule="SA_FIELD_SELF_COMPUTATION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ9fpxdREeCWcbKUk5fWYg" description="This method performs a nonsensical computation of a field with another&#xA;reference to the same field (e.g., x&amp;x or x-x). Because of the nature&#xA;of the computation, this operation doesn't seem to make sense,&#xA;and may indicate a typo or&#xA;a logic error.  Double check the computation." implements="_pZ9fpRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9fqBdREeCWcbKUk5fWYg" rule="SA_FIELD_SELF_COMPUTATION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ9fqRdREeCWcbKUk5fWYg" description="All writes to this field are of the constant value null, and thus&#xA;all reads of the field will return null.&#xA;Check for errors, or remove it if it is useless." name="UwF: Field only ever set to null">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9fqhdREeCWcbKUk5fWYg" rule="UWF_NULL_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ9fqxdREeCWcbKUk5fWYg" description="All writes to this field are of the constant value null, and thus&#xA;all reads of the field will return null.&#xA;Check for errors, or remove it if it is useless." implements="_pZ9fqRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9frBdREeCWcbKUk5fWYg" rule="UWF_NULL_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ9fsRdREeCWcbKUk5fWYg" description="This clone method seems to return null in some circumstances, but clone is never&#xA;&#x9;allowed to return a null value.  If you are convinced this path is unreachable, throw an AssertionError&#xA;&#x9;instead." name="NP: Clone method may return null">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9fshdREeCWcbKUk5fWYg" rule="NP_CLONE_COULD_RETURN_NULL"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ9fsxdREeCWcbKUk5fWYg" description="This clone method seems to return null in some circumstances, but clone is never&#xA;&#x9;allowed to return a null value.  If you are convinced this path is unreachable, throw an AssertionError&#xA;&#x9;instead." implements="_pZ9fsRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ9ftBdREeCWcbKUk5fWYg" rule="NP_CLONE_COULD_RETURN_NULL"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-GgxdREeCWcbKUk5fWYg" description="(From JDC Tech Tip): The Swing methods&#xA;show(), setVisible(), and pack() will create the associated peer for the frame.&#xA;With the creation of the peer, the system creates the event dispatch thread.&#xA;This makes things problematic because the event dispatch thread could be notifying&#xA;listeners while pack and validate are still processing. This situation could result in&#xA;two threads going through the Swing component-based GUI -- it's a serious flaw that&#xA;could result in deadlocks or other related threading issues. A pack call causes&#xA;components to be realized. As they are being realized (that is, not necessarily&#xA;visible), they could trigger listener notification on the event dispatch thread." name="SW: Certain swing methods needs to be invoked in Swing thread">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GhBdREeCWcbKUk5fWYg" rule="SW_SWING_METHODS_INVOKED_IN_SWING_THREAD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-GhRdREeCWcbKUk5fWYg" description="(From JDC Tech Tip): The Swing methods&#xA;show(), setVisible(), and pack() will create the associated peer for the frame.&#xA;With the creation of the peer, the system creates the event dispatch thread.&#xA;This makes things problematic because the event dispatch thread could be notifying&#xA;listeners while pack and validate are still processing. This situation could result in&#xA;two threads going through the Swing component-based GUI -- it's a serious flaw that&#xA;could result in deadlocks or other related threading issues. A pack call causes&#xA;components to be realized. As they are being realized (that is, not necessarily&#xA;visible), they could trigger listener notification on the event dispatch thread." implements="_pZ-GgxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GhhdREeCWcbKUk5fWYg" rule="SW_SWING_METHODS_INVOKED_IN_SWING_THREAD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-GixdREeCWcbKUk5fWYg" description="A pointer which is null on an exception path is dereferenced here.&amp;nbsp;&#xA;This will lead to a NullPointerException when the code is executed.&amp;nbsp;&#xA;Note that because FindBugs currently does not prune infeasible exception paths,&#xA;this may be a false warning.&#xA;&#xA; Also note that FindBugs considers the default case of a switch statement to&#xA;be an exception path, since the default case is often infeasible." name="NP: Null pointer dereference in method on exception path">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GjBdREeCWcbKUk5fWYg" rule="NP_ALWAYS_NULL_EXCEPTION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-GjRdREeCWcbKUk5fWYg" description="A pointer which is null on an exception path is dereferenced here.&amp;nbsp;&#xA;This will lead to a NullPointerException when the code is executed.&amp;nbsp;&#xA;Note that because FindBugs currently does not prune infeasible exception paths,&#xA;this may be a false warning.&#xA;&#xA; Also note that FindBugs considers the default case of a switch statement to&#xA;be an exception path, since the default case is often infeasible." implements="_pZ-GixdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GjhdREeCWcbKUk5fWYg" rule="NP_ALWAYS_NULL_EXCEPTION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-GjxdREeCWcbKUk5fWYg" description="This Serializable class is an inner class of a non-serializable class.&#xA;Thus, attempts to serialize it will also attempt to associate instance of the outer&#xA;class with which it is associated, leading to a runtime error.&#xA;&#xA;If possible, making the inner class a static inner class should solve the &#xA;problem. Making the outer class serializable might also work, but that would&#xA;mean serializing an instance of the inner class would always also serialize the instance&#xA;of the outer class, which it often not what you really want." name="Se: Non-serializable class has a serializable inner class">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GkBdREeCWcbKUk5fWYg" rule="SE_BAD_FIELD_INNER_CLASS"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-GkRdREeCWcbKUk5fWYg" description="This Serializable class is an inner class of a non-serializable class.&#xA;Thus, attempts to serialize it will also attempt to associate instance of the outer&#xA;class with which it is associated, leading to a runtime error.&#xA;&#xA;If possible, making the inner class a static inner class should solve the &#xA;problem. Making the outer class serializable might also work, but that would&#xA;mean serializing an instance of the inner class would always also serialize the instance&#xA;of the outer class, which it often not what you really want." implements="_pZ-GjxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GkhdREeCWcbKUk5fWYg" rule="SE_BAD_FIELD_INNER_CLASS"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-GkxdREeCWcbKUk5fWYg" description="This code creates an exception (or error) object, but doesn't do anything with it. For example,&#xA;something like &#xA;&#xA;&#xA;if (x &amp;lt; 0)&#xA;  new IllegalArgumentException(&quot;x must be nonnegative&quot;);&#xA;&#xA;&#xA;It was probably the intent of the programmer to throw the created exception:&#xA;&#xA;&#xA;if (x &amp;lt; 0)&#xA;  throw new IllegalArgumentException(&quot;x must be nonnegative&quot;);" name="RV: Exception created and dropped rather than thrown">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GlBdREeCWcbKUk5fWYg" rule="RV_EXCEPTION_NOT_THROWN"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-GlRdREeCWcbKUk5fWYg" description="This code creates an exception (or error) object, but doesn't do anything with it. For example,&#xA;something like &#xA;&#xA;&#xA;if (x &amp;lt; 0)&#xA;  new IllegalArgumentException(&quot;x must be nonnegative&quot;);&#xA;&#xA;&#xA;It was probably the intent of the programmer to throw the created exception:&#xA;&#xA;&#xA;if (x &amp;lt; 0)&#xA;  throw new IllegalArgumentException(&quot;x must be nonnegative&quot;);" implements="_pZ-GkxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GlhdREeCWcbKUk5fWYg" rule="RV_EXCEPTION_NOT_THROWN"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-GlxdREeCWcbKUk5fWYg" description="The code here uses File.separator &#xA;where a regular expression is required. This will fail on Windows&#xA;platforms, where the File.separator is a backslash, which is interpreted in a&#xA;regular expression as an escape character. Amoung other options, you can just use&#xA;File.separatorChar=='\\' ? &quot;\\\\&quot; : File.separator instead of&#xA;File.separator" name="RE: File.separator used for regular expression">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GmBdREeCWcbKUk5fWYg" rule="RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-GmRdREeCWcbKUk5fWYg" description="The code here uses File.separator &#xA;where a regular expression is required. This will fail on Windows&#xA;platforms, where the File.separator is a backslash, which is interpreted in a&#xA;regular expression as an escape character. Amoung other options, you can just use&#xA;File.separatorChar=='\\' ? &quot;\\\\&quot; : File.separator instead of&#xA;File.separator" implements="_pZ-GlxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GmhdREeCWcbKUk5fWYg" rule="RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-GmxdREeCWcbKUk5fWYg" description="This method compares two Boolean values using the == or != operator. &#xA;Normally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE),&#xA;but it is possible to create other Boolean objects using the new Boolean(b)&#xA;constructor. It is best to avoid such objects, but if they do exist,&#xA;then checking Boolean objects for equality using == or != will give results&#xA;than are different than you would get using .equals(...)" name="RC: Suspicious reference comparison of Boolean values">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GnBdREeCWcbKUk5fWYg" rule="RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-GnRdREeCWcbKUk5fWYg" description="This method compares two Boolean values using the == or != operator. &#xA;Normally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE),&#xA;but it is possible to create other Boolean objects using the new Boolean(b)&#xA;constructor. It is best to avoid such objects, but if they do exist,&#xA;then checking Boolean objects for equality using == or != will give results&#xA;than are different than you would get using .equals(...)" implements="_pZ-GmxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GnhdREeCWcbKUk5fWYg" rule="RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-GoxdREeCWcbKUk5fWYg" description="This class contains an instance final field that&#xA;   is initialized to a compile-time static value.&#xA;   Consider making the field static." name="SS: Unread field: should this field be static?">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GpBdREeCWcbKUk5fWYg" rule="SS_SHOULD_BE_STATIC"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-GpRdREeCWcbKUk5fWYg" description="This class contains an instance final field that&#xA;   is initialized to a compile-time static value.&#xA;   Consider making the field static." implements="_pZ-GoxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GphdREeCWcbKUk5fWYg" rule="SS_SHOULD_BE_STATIC"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-GpxdREeCWcbKUk5fWYg" description="The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match&#xA;the type of the corresponding parameter in the superclass. For example, if you have:&#xA;&#xA;&#xA;&#xA;import alpha.Foo;&#xA;public class A {&#xA;  public int f(Foo x) { return 17; }&#xA;}&#xA;----&#xA;import beta.Foo;&#xA;public class B extends A {&#xA;  public int f(Foo x) { return 42; }&#xA;  public int f(alpha.Foo x) { return 27; }&#xA;}&#xA;&#xA;&#xA;&#xA;The f(Foo) method defined in class B doesn't&#xA;override the &#xA;f(Foo) method defined in class A, because the argument&#xA;types are Foo's from different packages.&#xA;&#xA;&#xA;In this case, the subclass does define a method with a signature identical to the method in the superclass,&#xA;so this is presumably understood. However, such methods are exceptionally confusing. You should strongly consider&#xA;removing or deprecating the method with the similar but not identical signature." name="Nm: Method doesn't override method in superclass due to wrong package for parameter">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GqBdREeCWcbKUk5fWYg" rule="NM_WRONG_PACKAGE_INTENTIONAL"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-GqRdREeCWcbKUk5fWYg" description="The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match&#xA;the type of the corresponding parameter in the superclass. For example, if you have:&#xA;&#xA;&#xA;&#xA;import alpha.Foo;&#xA;public class A {&#xA;  public int f(Foo x) { return 17; }&#xA;}&#xA;----&#xA;import beta.Foo;&#xA;public class B extends A {&#xA;  public int f(Foo x) { return 42; }&#xA;  public int f(alpha.Foo x) { return 27; }&#xA;}&#xA;&#xA;&#xA;&#xA;The f(Foo) method defined in class B doesn't&#xA;override the &#xA;f(Foo) method defined in class A, because the argument&#xA;types are Foo's from different packages.&#xA;&#xA;&#xA;In this case, the subclass does define a method with a signature identical to the method in the superclass,&#xA;so this is presumably understood. However, such methods are exceptionally confusing. You should strongly consider&#xA;removing or deprecating the method with the similar but not identical signature." implements="_pZ-GpxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GqhdREeCWcbKUk5fWYg" rule="NM_WRONG_PACKAGE_INTENTIONAL"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-GsxdREeCWcbKUk5fWYg" description="There is a branch of statement that, if executed,  guarantees that&#xA;a null value will be dereferenced, which&#xA;would generate a NullPointerException when the code is executed.&#xA;Of course, the problem might be that the branch or statement is infeasible and that&#xA;the null pointer exception can't ever be executed; deciding that is beyond the ability of FindBugs.&#xA;Due to the fact that this value had been previously tested for nullness, this is a definite possibility." name="NP: Possible null pointer dereference on path that might be infeasible">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GtBdREeCWcbKUk5fWYg" rule="NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-GtRdREeCWcbKUk5fWYg" description="There is a branch of statement that, if executed,  guarantees that&#xA;a null value will be dereferenced, which&#xA;would generate a NullPointerException when the code is executed.&#xA;Of course, the problem might be that the branch or statement is infeasible and that&#xA;the null pointer exception can't ever be executed; deciding that is beyond the ability of FindBugs.&#xA;Due to the fact that this value had been previously tested for nullness, this is a definite possibility." implements="_pZ-GsxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GthdREeCWcbKUk5fWYg" rule="NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-GtxdREeCWcbKUk5fWYg" description="This class is an inner class, but does not use its embedded reference&#xA;  to the object which created it.&amp;nbsp; This reference makes the instances&#xA;  of the class larger, and may keep the reference to the creator object&#xA;  alive longer than necessary.&amp;nbsp; If possible, the class should be&#xA;   made static." name="SIC: Should be a static inner class">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GuBdREeCWcbKUk5fWYg" rule="SIC_INNER_SHOULD_BE_STATIC"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-GuRdREeCWcbKUk5fWYg" description="This class is an inner class, but does not use its embedded reference&#xA;  to the object which created it.&amp;nbsp; This reference makes the instances&#xA;  of the class larger, and may keep the reference to the creator object&#xA;  alive longer than necessary.&amp;nbsp; If possible, the class should be&#xA;   made static." implements="_pZ-GtxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GuhdREeCWcbKUk5fWYg" rule="SIC_INNER_SHOULD_BE_STATIC"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-GuxdREeCWcbKUk5fWYg" description="This method contains an unsynchronized lazy initialization of a static field.&#xA;After the field is set, the object stored into that location is further updated or accessed.&#xA;The setting of the field is visible to other threads as soon as it is set. If the&#xA;further accesses in the method that set the field serve to initialize the object, then&#xA;you have a very serious multithreading bug, unless something else prevents&#xA;any other thread from accessing the stored object until it is fully initialized.&#xA;&#xA;Even if you feel confident that the method is never called by multiple&#xA;threads, it might be better to not set the static field until the value&#xA;you are setting it to is fully populated/initialized." name="LI: Incorrect lazy initialization and update of static field">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GvBdREeCWcbKUk5fWYg" rule="LI_LAZY_INIT_UPDATE_STATIC"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-GvRdREeCWcbKUk5fWYg" description="This method contains an unsynchronized lazy initialization of a static field.&#xA;After the field is set, the object stored into that location is further updated or accessed.&#xA;The setting of the field is visible to other threads as soon as it is set. If the&#xA;futher accesses in the method that set the field serve to initialize the object, then&#xA;you have a very serious multithreading bug, unless something else prevents&#xA;any other thread from accessing the stored object until it is fully initialized.&#xA;&#xA;Even if you feel confident that the method is never called by multiple&#xA;threads, it might be better to not set the static field until the value&#xA;you are setting it to is fully populated/initialized." implements="_pZ-GuxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GvhdREeCWcbKUk5fWYg" rule="LI_LAZY_INIT_UPDATE_STATIC"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-GwxdREeCWcbKUk5fWYg" description="A final static field references an array&#xA;   and can be accessed by malicious code or&#xA;        by accident from another package.&#xA;   This code can freely modify the contents of the array." name="MS: Field is a mutable array">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GxBdREeCWcbKUk5fWYg" rule="MS_MUTABLE_ARRAY"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-GxRdREeCWcbKUk5fWYg" description="A final static field references an array&#xA;   and can be accessed by malicious code or&#xA;        by accident from another package.&#xA;   This code can freely modify the contents of the array." implements="_pZ-GwxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-GxhdREeCWcbKUk5fWYg" rule="MS_MUTABLE_ARRAY"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-tkxdREeCWcbKUk5fWYg" description="A web server generally only creates one instance of servlet or jsp class (i.e., treats&#xA;the class as a Singleton), &#xA;and will &#xA;have multiple threads invoke methods on that instance to service multiple &#xA;simultaneous requests.&#xA;Thus, having a mutable instance field generally creates race conditions." name="MSF: Mutable servlet field">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-tlBdREeCWcbKUk5fWYg" rule="MSF_MUTABLE_SERVLET_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-tlRdREeCWcbKUk5fWYg" description="A web server generally only creates one instance of servlet or jsp class (i.e., treats&#xA;the class as a Singleton), &#xA;and will &#xA;have multiple threads invoke methods on that instance to service multiple &#xA;simultaneous requests.&#xA;Thus, having a mutable instance field generally creates race conditions." implements="_pZ-tkxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-tlhdREeCWcbKUk5fWYg" rule="MSF_MUTABLE_SERVLET_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-tnxdREeCWcbKUk5fWYg" description="This method contains a double assignment of a local variable; e.g.&#xA;&#xA;&#xA;  public void foo() {&#xA;    int x,y;&#xA;    x = x = 17;&#xA;  }&#xA;&#xA;Assigning the same value to a variable twice is useless, and may indicate a logic error or typo." name="SA: Double assignment of local variable">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-toBdREeCWcbKUk5fWYg" rule="SA_LOCAL_DOUBLE_ASSIGNMENT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-toRdREeCWcbKUk5fWYg" description="This method contains a double assignment of a local variable; e.g.&#xA;&#xA;&#xA;  public void foo() {&#xA;    int x,y;&#xA;    x = x = 17;&#xA;  }&#xA;&#xA;Assigning the same value to a variable twice is useless, and may indicate a logic error or typo." implements="_pZ-tnxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-tohdREeCWcbKUk5fWYg" rule="SA_LOCAL_DOUBLE_ASSIGNMENT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-tpxdREeCWcbKUk5fWYg" description="A value that could be null is stored into a field that has been annotated as NonNull." name="NP: Store of null value into field annotated NonNull">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-tqBdREeCWcbKUk5fWYg" rule="NP_STORE_INTO_NONNULL_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-tqRdREeCWcbKUk5fWYg" description="A value that could be null is stored into a field that has been annotated as NonNull." implements="_pZ-tpxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-tqhdREeCWcbKUk5fWYg" rule="NP_STORE_INTO_NONNULL_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-tqxdREeCWcbKUk5fWYg" description="The method invokes String.indexOf and checks to see if the result is positive or non-positive.&#xA;   It is much more typical to check to see if the result is negative or non-negative. It is&#xA;   positive only if the substring checked for occurs at some place other than at the beginning of&#xA;   the String." name="RV: Method checks to see if result of String.indexOf is positive">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-trBdREeCWcbKUk5fWYg" rule="RV_CHECK_FOR_POSITIVE_INDEXOF"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-trRdREeCWcbKUk5fWYg" description="The method invokes String.indexOf and checks to see if the result is positive or non-positive.&#xA;   It is much more typical to check to see if the result is negative or non-negative. It is&#xA;   positive only if the substring checked for occurs at some place other than at the beginning of&#xA;   the String." implements="_pZ-tqxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-trhdREeCWcbKUk5fWYg" rule="RV_CHECK_FOR_POSITIVE_INDEXOF"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-tsxdREeCWcbKUk5fWYg" description="This method passes a null value as the parameter of a method which&#xA;&#x9;must be nonnull. Either this parameter has been explicitly marked&#xA;&#x9;as @Nonnull, or analysis has determined that this parameter is&#xA;&#x9;always dereferenced." name="NP: Method call passes null to a nonnull parameter">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-ttBdREeCWcbKUk5fWYg" rule="NP_NONNULL_PARAM_VIOLATION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-ttRdREeCWcbKUk5fWYg" description="This method passes a null value as the parameter of a method which&#xA;&#x9;must be nonnull. Either this parameter has been explicitly marked&#xA;&#x9;as @Nonnull, or analysis has determined that this parameter is&#xA;&#x9;always dereferenced." implements="_pZ-tsxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-tthdREeCWcbKUk5fWYg" rule="NP_NONNULL_PARAM_VIOLATION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-ttxdREeCWcbKUk5fWYg" description="A value is used in a way that requires it to be always be a value denoted by a type qualifier, but&#xA;&#x9;there is an explicit annotation stating that it is not known where the value is required to have that type qualifier.&#xA;&#x9;Either the usage or the annotation is incorrect." name="TQ: Explicit annotation inconsistent with use">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-tuBdREeCWcbKUk5fWYg" rule="TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-tuRdREeCWcbKUk5fWYg" description="A value is used in a way that requires it to be always be a value denoted by a type qualifier, but&#xA;&#x9;there is an explicit annotation stating that it is not known where the value is required to have that type qualifier.&#xA;&#x9;Either the usage or the annotation is incorrect." implements="_pZ-ttxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-tuhdREeCWcbKUk5fWYg" rule="TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-tvxdREeCWcbKUk5fWYg" description="This method compares a local variable with itself, and may indicate a typo or&#xA;a logic error.  Make sure that you are comparing the right things." name="SA: Self comparison of value with itself">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-twBdREeCWcbKUk5fWYg" rule="SA_LOCAL_SELF_COMPARISON"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-twRdREeCWcbKUk5fWYg" description="This method compares a local variable with itself, and may indicate a typo or&#xA;a logic error.  Make sure that you are comparing the right things." implements="_pZ-tvxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-twhdREeCWcbKUk5fWYg" rule="SA_LOCAL_SELF_COMPARISON"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-txxdREeCWcbKUk5fWYg" description="In order for the readResolve method to be recognized by the serialization&#xA;mechanism, it must not be declared as a static method." name="Se: The readResolve method must not be declared as a static method.">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-tyBdREeCWcbKUk5fWYg" rule="SE_READ_RESOLVE_IS_STATIC"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-tyRdREeCWcbKUk5fWYg" description="In order for the readResolve method to be recognized by the serialization&#xA;mechanism, it must not be declared as a static method." implements="_pZ-txxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-tyhdREeCWcbKUk5fWYg" rule="SE_READ_RESOLVE_IS_STATIC"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-tyxdREeCWcbKUk5fWYg" description="This method compares a reference value to a constant using the == or != operator,&#xA;where the correct way to compare instances of this type is generally&#xA;with the equals() method.  &#xA;It is possible to create distinct instances that are equal but do not compare as == since&#xA;they are different objects.&#xA;Examples of classes which should generally&#xA;not be compared by reference are java.lang.Integer, java.lang.Float, etc." name="RC: Suspicious reference comparison to constant">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-tzBdREeCWcbKUk5fWYg" rule="RC_REF_COMPARISON_BAD_PRACTICE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-tzRdREeCWcbKUk5fWYg" description="This method compares a reference value to a constant using the == or != operator,&#xA;where the correct way to compare instances of this type is generally&#xA;with the equals() method.  &#xA;It is possible to create distinct instances that are equal but do not compare as == since&#xA;they are different objects.&#xA;Examples of classes which should generally&#xA;not be compared by reference are java.lang.Integer, java.lang.Float, etc." implements="_pZ-tyxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-tzhdREeCWcbKUk5fWYg" rule="RC_REF_COMPARISON_BAD_PRACTICE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-tzxdREeCWcbKUk5fWYg" description="The referenced methods have names that differ only by capitalization. &#xA;This is very confusing because if the capitalization were&#xA;identical then one of the methods would override the other. From the existence of other methods, it&#xA;seems that the existence of both of these methods is intentional, but is sure is confusing. &#xA;You should try hard to eliminate one of them, unless you are forced to have both due to frozen APIs." name="Nm: Very confusing method names (but perhaps intentional)">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-t0BdREeCWcbKUk5fWYg" rule="NM_VERY_CONFUSING_INTENTIONAL"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-t0RdREeCWcbKUk5fWYg" description="The referenced methods have names that differ only by capitalization. &#xA;This is very confusing because if the capitalization were&#xA;identical then one of the methods would override the other. From the existence of other methods, it&#xA;seems that the existence of both of these methods is intentional, but is sure is confusing. &#xA;You should try hard to eliminate one of them, unless you are forced to have both due to frozen APIs." implements="_pZ-tzxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-t0hdREeCWcbKUk5fWYg" rule="NM_VERY_CONFUSING_INTENTIONAL"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-t0xdREeCWcbKUk5fWYg" description="The variable referenced at this point is known to be null due to an earlier&#xA;   check against null. Although this is valid, it might be a mistake (perhaps you&#xA;intended to refer to a different variable, or perhaps the earlier check to see if the&#xA;variable is null should have been a check to see if it was nonnull)." name="NP: Load of known null value">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-t1BdREeCWcbKUk5fWYg" rule="NP_LOAD_OF_KNOWN_NULL_VALUE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-t1RdREeCWcbKUk5fWYg" description="The variable referenced at this point is known to be null due to an earlier&#xA;   check against null. Although this is valid, it might be a mistake (perhaps you&#xA;intended to refer to a different variable, or perhaps the earlier check to see if the&#xA;variable is null should have been a check to see if it was nonnull)." implements="_pZ-t0xdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-t1hdREeCWcbKUk5fWYg" rule="NP_LOAD_OF_KNOWN_NULL_VALUE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ-t1xdREeCWcbKUk5fWYg" description="This class implements the Serializable interface, but does&#xA;  not define a serialVersionUID field.&amp;nbsp;&#xA;  A change as simple as adding a reference to a .class object&#xA;    will add synthetic fields to the class,&#xA;   which will unfortunately change the implicit&#xA;   serialVersionUID (e.g., adding a reference to String.class&#xA;   will generate a static field class$java$lang$String).&#xA;   Also, different source code to bytecode compilers may use different&#xA;   naming conventions for synthetic variables generated for&#xA;   references to class objects or inner classes.&#xA;   To ensure interoperability of Serializable across versions,&#xA;   consider adding an explicit serialVersionUID." name="SnVI: Class is Serializable, but doesn't define serialVersionUID">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-t2BdREeCWcbKUk5fWYg" rule="SE_NO_SERIALVERSIONID"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ-t2RdREeCWcbKUk5fWYg" description="This class implements the Serializable interface, but does&#xA;  not define a serialVersionUID field.&amp;nbsp;&#xA;  A change as simple as adding a reference to a .class object&#xA;    will add synthetic fields to the class,&#xA;   which will unfortunately change the implicit&#xA;   serialVersionUID (e.g., adding a reference to String.class&#xA;   will generate a static field class$java$lang$String).&#xA;   Also, different source code to bytecode compilers may use different&#xA;   naming conventions for synthetic variables generated for&#xA;   references to class objects or inner classes.&#xA;   To ensure interoperability of Serializable across versions,&#xA;   consider adding an explicit serialVersionUID." implements="_pZ-t1xdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ-t2hdREeCWcbKUk5fWYg" rule="SE_NO_SERIALVERSIONID"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_UoBdREeCWcbKUk5fWYg" description="The method creates an IO stream object, does not assign it to any&#xA;fields, pass it to other methods that might close it, &#xA;or return it, and does not appear to close&#xA;the stream on all paths out of the method.&amp;nbsp; This may result in&#xA;a file descriptor leak.&amp;nbsp; It is generally a good&#xA;idea to use a finally block to ensure that streams are&#xA;closed." name="OS: Method may fail to close stream">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_UoRdREeCWcbKUk5fWYg" rule="OS_OPEN_STREAM"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_UohdREeCWcbKUk5fWYg" description="The method creates an IO stream object, does not assign it to any&#xA;fields, pass it to other methods that might close it, &#xA;or return it, and does not appear to close&#xA;the stream on all paths out of the method.&amp;nbsp; This may result in&#xA;a file descriptor leak.&amp;nbsp; It is generally a good&#xA;idea to use a finally block to ensure that streams are&#xA;closed." implements="_pZ_UoBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_UoxdREeCWcbKUk5fWYg" rule="OS_OPEN_STREAM"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_UqBdREeCWcbKUk5fWYg" description="Since the field is synchronized on, it seems not likely to be null.&#xA;If it is null and then synchronized on a NullPointerException will be&#xA;thrown and the check would be pointless. Better to synchronize on &#xA;another field." name="NP: Synchronize and null check on the same field.">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_UqRdREeCWcbKUk5fWYg" rule="NP_SYNC_AND_NULL_CHECK_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_UqhdREeCWcbKUk5fWYg" description="Since the field is synchronized on, it seems not likely to be null.&#xA;If it is null and then synchronized on a NullPointerException will be&#xA;thrown and the check would be pointless. Better to synchronize on &#xA;another field." implements="_pZ_UqBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_UqxdREeCWcbKUk5fWYg" rule="NP_SYNC_AND_NULL_CHECK_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_UrBdREeCWcbKUk5fWYg" description="A value stored in the previous switch case is ignored here due to a switch fall through to a place where&#xA;&#x9;an exception is thrown. It is likely that&#xA;&#x9;you forgot to put a break or return at the end of the previous case." name="SF: Dead store due to switch statement fall through to throw">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_UrRdREeCWcbKUk5fWYg" rule="SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_UrhdREeCWcbKUk5fWYg" description="A value stored in the previous switch case is ignored here due to a switch fall through to a place where&#xA;&#x9;an exception is thrown. It is likely that&#xA;&#x9;you forgot to put a break or return at the end of the previous case." implements="_pZ_UrBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_UrxdREeCWcbKUk5fWYg" rule="SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_UvBdREeCWcbKUk5fWYg" description="A String function is being invoked and &quot;.&quot; is being passed&#xA;to a parameter that takes a regular expression as an argument. Is this what you intended?&#xA;For example&#xA;s.replaceAll(&quot;.&quot;, &quot;/&quot;) will return a String in which every&#xA;character has been replaced by a / character,&#xA;and s.split(&quot;.&quot;) always returns a zero length array of String." name="RE: &quot;.&quot; used for regular expression">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_UvRdREeCWcbKUk5fWYg" rule="RE_POSSIBLE_UNINTENDED_PATTERN"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_UvhdREeCWcbKUk5fWYg" description="A String function is being invoked and &quot;.&quot; is being passed&#xA;to a parameter that takes a regular expression as an argument. Is this what you intended?&#xA;For example&#xA;s.replaceAll(&quot;.&quot;, &quot;/&quot;) will return a String in which every&#xA;character has been replaced by a / character,&#xA;and s.split(&quot;.&quot;) always returns a zero length array of String." implements="_pZ_UvBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_UvxdREeCWcbKUk5fWYg" rule="RE_POSSIBLE_UNINTENDED_PATTERN"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_UwBdREeCWcbKUk5fWYg" description="A value is checked here to see whether it is null, but this value can't&#xA;be null because it was previously dereferenced and if it were null a null pointer&#xA;exception would have occurred at the earlier dereference. &#xA;Essentially, this code and the previous dereference&#xA;disagree as to whether this value is allowed to be null. Either the check is redundant&#xA;or the previous dereference is erroneous." name="RCN: Nullcheck of value previously dereferenced">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_UwRdREeCWcbKUk5fWYg" rule="RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_UwhdREeCWcbKUk5fWYg" description="A value is checked here to see whether it is null, but this value can't&#xA;be null because it was previously dereferenced and if it were null a null pointer&#xA;exception would have occurred at the earlier dereference. &#xA;Essentially, this code and the previous dereference&#xA;disagree as to whether this value is allowed to be null. Either the check is redundant&#xA;or the previous dereference is erroneous." implements="_pZ_UwBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_UwxdREeCWcbKUk5fWYg" rule="RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_UxBdREeCWcbKUk5fWYg" description="This class/interface has a simple name that is identical to that of an implemented/extended interface, except&#xA;that the interface is in a different package (e.g., alpha.Foo extends beta.Foo). &#xA;This can be exceptionally confusing, create lots of situations in which you have to look at import statements&#xA;to resolve references and creates many&#xA;opportunities to accidently define methods that do not override methods in their superclasses." name="Nm: Class names shouldn't shadow simple name of implemented interface">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_UxRdREeCWcbKUk5fWYg" rule="NM_SAME_SIMPLE_NAME_AS_INTERFACE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_UxhdREeCWcbKUk5fWYg" description="This class/interface has a simple name that is identical to that of an implemented/extended interface, except&#xA;that the interface is in a different package (e.g., alpha.Foo extends beta.Foo). &#xA;This can be exceptionally confusing, create lots of situations in which you have to look at import statements&#xA;to resolve references and creates many&#xA;opportunities to accidently define methods that do not override methods in their superclasses." implements="_pZ_UxBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_UxxdREeCWcbKUk5fWYg" rule="NM_SAME_SIMPLE_NAME_AS_INTERFACE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_UyBdREeCWcbKUk5fWYg" description="A call to a setXXX method of a prepared statement was made where the&#xA;parameter index is 0. As parameter indexes start at index 1, this is always a mistake." name="SQL: Method attempts to access a prepared statement parameter with index 0">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_UyRdREeCWcbKUk5fWYg" rule="SQL_BAD_PREPARED_STATEMENT_ACCESS"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_UyhdREeCWcbKUk5fWYg" description="A call to a setXXX method of a prepared statement was made where the&#xA;parameter index is 0. As parameter indexes start at index 1, this is always a mistake." implements="_pZ_UyBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_UyxdREeCWcbKUk5fWYg" rule="SQL_BAD_PREPARED_STATEMENT_ACCESS"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_U0BdREeCWcbKUk5fWYg" description="This class implements the Serializable interface&#xA;   and its superclass does not. When such an object is deserialized,&#xA;   the fields of the superclass need to be initialized by&#xA;   invoking the void constructor of the superclass.&#xA;   Since the superclass does not have one,&#xA;   serialization and deserialization will fail at runtime." name="Se: Class is Serializable but its superclass doesn't define a void constructor">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_U0RdREeCWcbKUk5fWYg" rule="SE_NO_SUITABLE_CONSTRUCTOR"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_U0hdREeCWcbKUk5fWYg" description="This class implements the Serializable interface&#xA;   and its superclass does not. When such an object is deserialized,&#xA;   the fields of the superclass need to be initialized by&#xA;   invoking the void constructor of the superclass.&#xA;   Since the superclass does not have one,&#xA;   serialization and deserialization will fail at runtime." implements="_pZ_U0BdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_U0xdREeCWcbKUk5fWYg" rule="SE_NO_SUITABLE_CONSTRUCTOR"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_U1BdREeCWcbKUk5fWYg" description="The field is marked as transient, but the class isn't Serializable, so marking it as transient&#xA;has absolutely no effect. &#xA;This may be leftover marking from a previous version of the code in which the class was transient, or&#xA;it may indicate a misunderstanding of how serialization works." name="Se: Transient field of class that isn't Serializable.">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_U1RdREeCWcbKUk5fWYg" rule="SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_U1hdREeCWcbKUk5fWYg" description="The field is marked as transient, but the class isn't Serializable, so marking it as transient&#xA;has absolutely no effect. &#xA;This may be leftover marking from a previous version of the code in which the class was transient, or&#xA;it may indicate a misunderstanding of how serialization works." implements="_pZ_U1BdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_U1xdREeCWcbKUk5fWYg" rule="SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_U4BdREeCWcbKUk5fWYg" description="A non-serializable value is stored into a non-transient field&#xA;of a serializable class." name="Se: Non-serializable value stored into instance field of a serializable class">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_U4RdREeCWcbKUk5fWYg" rule="SE_BAD_FIELD_STORE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_U4hdREeCWcbKUk5fWYg" description="A non-serializable value is stored into a non-transient field&#xA;of a serializable class." implements="_pZ_U4BdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_U4xdREeCWcbKUk5fWYg" rule="SE_BAD_FIELD_STORE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_U5BdREeCWcbKUk5fWYg" description="This method uses a try-catch block that catches Exception objects, but Exception is not&#xA;  thrown within the try block, and RuntimeException is not explicitly caught.  It is a common bug pattern to&#xA;  say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception&#xA;  each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well,&#xA;  masking potential bugs." name="REC: Exception is caught when Exception is not thrown">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_U5RdREeCWcbKUk5fWYg" rule="REC_CATCH_EXCEPTION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_U5hdREeCWcbKUk5fWYg" description="This method uses a try-catch block that catches Exception objects, but Exception is not&#xA;  thrown within the try block, and RuntimeException is not explicitly caught.  It is a common bug pattern to&#xA;  say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception&#xA;  each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well,&#xA;  masking potential bugs." implements="_pZ_U5BdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_U5xdREeCWcbKUk5fWYg" rule="REC_CATCH_EXCEPTION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_U7BdREeCWcbKUk5fWYg" description="This class defines a private readResolve method. Since it is private, it won't be inherited by subclasses.&#xA;This might be intentional and OK, but should be reviewed to ensure it is what is intended." name="Se: private readResolve method not inherited by subclasses">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_U7RdREeCWcbKUk5fWYg" rule="SE_PRIVATE_READ_RESOLVE_NOT_INHERITED"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_U7hdREeCWcbKUk5fWYg" description="This class defines a private readResolve method. Since it is private, it won't be inherited by subclasses.&#xA;This might be intentional and OK, but should be reviewed to ensure it is what is intended." implements="_pZ_U7BdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_U7xdREeCWcbKUk5fWYg" rule="SE_PRIVATE_READ_RESOLVE_NOT_INHERITED"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_U8BdREeCWcbKUk5fWYg" description="This class extends from a Servlet class, and uses an instance member variable. Since only&#xA;    one instance of a Servlet class is created by the J2EE framework, and used in a&#xA;    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider&#xA;    only using method local variables." name="MTIA: Class extends Servlet class and uses instance variables">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_U8RdREeCWcbKUk5fWYg" rule="MTIA_SUSPECT_SERVLET_INSTANCE_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_U8hdREeCWcbKUk5fWYg" description="This class extends from a Servlet class, and uses an instance member variable. Since only&#xA;    one instance of a Servlet class is created by the J2EE framework, and used in a&#xA;    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider&#xA;    only using method local variables." implements="_pZ_U8BdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_U8xdREeCWcbKUk5fWYg" rule="MTIA_SUSPECT_SERVLET_INSTANCE_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_U_BdREeCWcbKUk5fWYg" description="This method contains a self assignment of a local variable; e.g.&#xA;&#xA;  public void foo() {&#xA;    int x = 3;&#xA;    x = x;&#xA;  }&#xA;&#xA;&#xA;Such assignments are useless, and may indicate a logic error or typo." name="SA: Self assignment of local variable">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_U_RdREeCWcbKUk5fWYg" rule="SA_LOCAL_SELF_ASSIGNMENT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_U_hdREeCWcbKUk5fWYg" description="This method contains a self assignment of a local variable; e.g.&#xA;&#xA;  public void foo() {&#xA;    int x = 3;&#xA;    x = x;&#xA;  }&#xA;&#xA;&#xA;Such assignments are useless, and may indicate a logic error or typo." implements="_pZ_U_BdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_U_xdREeCWcbKUk5fWYg" rule="SA_LOCAL_SELF_ASSIGNMENT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_VABdREeCWcbKUk5fWYg" description="This method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a&#xA;static method, is more simple and clear to use Thread.interrupted()." name="STI: Unneeded use of currentThread() call, to call interrupted()">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_VARdREeCWcbKUk5fWYg" rule="STI_INTERRUPTED_ON_CURRENTTHREAD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_VAhdREeCWcbKUk5fWYg" description="This method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a&#xA;static method, is more simple and clear to use Thread.interrupted()." implements="_pZ_VABdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_VAxdREeCWcbKUk5fWYg" rule="STI_INTERRUPTED_ON_CURRENTTHREAD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_VBBdREeCWcbKUk5fWYg" description="A null pointer is dereferenced here.&amp;nbsp; This will lead to a&#xA;NullPointerException when the code is executed." name="NP: Null pointer dereference">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_VBRdREeCWcbKUk5fWYg" rule="NP_ALWAYS_NULL"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_VBhdREeCWcbKUk5fWYg" description="A null pointer is dereferenced here.&amp;nbsp; This will lead to a&#xA;NullPointerException when the code is executed." implements="_pZ_VBBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_VBxdREeCWcbKUk5fWYg" rule="NP_ALWAYS_NULL"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_VEBdREeCWcbKUk5fWYg" description="This method explicitly invokes run() on an object.&amp;nbsp;&#xA;  In general, classes implement the Runnable interface because&#xA;  they are going to have their run() method invoked in a new thread,&#xA;  in which case Thread.start() is the right method to call." name="Ru: Invokes run on a thread (did you mean to start it instead?)">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_VERdREeCWcbKUk5fWYg" rule="RU_INVOKE_RUN"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_VEhdREeCWcbKUk5fWYg" description="This method explicitly invokes run() on an object.&amp;nbsp;&#xA;  In general, classes implement the Runnable interface because&#xA;  they are going to have their run() method invoked in a new thread,&#xA;  in which case Thread.start() is the right method to call." implements="_pZ_VEBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_VExdREeCWcbKUk5fWYg" rule="RU_INVOKE_RUN"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_VFBdREeCWcbKUk5fWYg" description="A mutable static field could be changed by malicious code or&#xA;        by accident from another package.&#xA;        The field could be made final to avoid&#xA;        this vulnerability." name="MS: Field isn't final but should be">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_VFRdREeCWcbKUk5fWYg" rule="MS_SHOULD_BE_FINAL"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_VFhdREeCWcbKUk5fWYg" description="A mutable static field could be changed by malicious code or&#xA;        by accident from another package.&#xA;        The field could be made final to avoid&#xA;        this vulnerability." implements="_pZ_VFBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_VFxdREeCWcbKUk5fWYg" rule="MS_SHOULD_BE_FINAL"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_VGBdREeCWcbKUk5fWYg" description="This method assigns a literal boolean value (true or false) to a boolean variable inside&#xA;      an if or while expression. Most probably this was supposed to be a boolean comparison using &#xA;      ==, not an assignment using =." name="QBA: Method assigns boolean literal in boolean expression">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_VGRdREeCWcbKUk5fWYg" rule="QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_VGhdREeCWcbKUk5fWYg" description="This method assigns a literal boolean value (true or false) to a boolean variable inside&#xA;      an if or while expression. Most probably this was supposed to be a boolean comparison using &#xA;      ==, not an assignment using =." implements="_pZ_VGBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7sBdREeCWcbKUk5fWYg" rule="QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_7sRdREeCWcbKUk5fWYg" description="A public static method returns a reference to&#xA;   an array that is part of the static state of the class.&#xA;   Any code that calls this method can freely modify&#xA;   the underlying array.&#xA;   One fix is to return a copy of the array." name="MS: Public static method may expose internal representation by returning array">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7shdREeCWcbKUk5fWYg" rule="MS_EXPOSE_REP"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_7sxdREeCWcbKUk5fWYg" description="A public static method returns a reference to&#xA;   an array that is part of the static state of the class.&#xA;   Any code that calls this method can freely modify&#xA;   the underlying array.&#xA;   One fix is to return a copy of the array." implements="_pZ_7sRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7tBdREeCWcbKUk5fWYg" rule="MS_EXPOSE_REP"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_7tRdREeCWcbKUk5fWYg" description="This method ignores the return value of one of the variants of&#xA;  java.io.InputStream.read() which can return multiple bytes.&amp;nbsp;&#xA;  If the return value is not checked, the caller will not be able to correctly&#xA;  handle the case where fewer bytes were read than the caller requested.&amp;nbsp;&#xA;  This is a particularly insidious kind of bug, because in many programs,&#xA;  reads from input streams usually do read the full amount of data requested,&#xA;  causing the program to fail only sporadically." name="RR: Method ignores results of InputStream.read()">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7thdREeCWcbKUk5fWYg" rule="RR_NOT_CHECKED"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_7txdREeCWcbKUk5fWYg" description="This method ignores the return value of one of the variants of&#xA;  java.io.InputStream.read() which can return multiple bytes.&amp;nbsp;&#xA;  If the return value is not checked, the caller will not be able to correctly&#xA;  handle the case where fewer bytes were read than the caller requested.&amp;nbsp;&#xA;  This is a particularly insidious kind of bug, because in many programs,&#xA;  reads from input streams usually do read the full amount of data requested,&#xA;  causing the program to fail only sporadically." implements="_pZ_7tRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7uBdREeCWcbKUk5fWYg" rule="RR_NOT_CHECKED"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_7uRdREeCWcbKUk5fWYg" description="This class contains similarly-named get and set&#xA;  methods where the set method is synchronized and the get method is not.&amp;nbsp;&#xA;  This may result in incorrect behavior at runtime, as callers of the get&#xA;  method will not necessarily see a consistent state for the object.&amp;nbsp;&#xA;  The get method should be made synchronized." name="UG: Unsynchronized get method, synchronized set method">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7uhdREeCWcbKUk5fWYg" rule="UG_SYNC_SET_UNSYNC_GET"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_7uxdREeCWcbKUk5fWYg" description="This class contains similarly-named get and set&#xA;  methods where the set method is synchronized and the get method is not.&amp;nbsp;&#xA;  This may result in incorrect behavior at runtime, as callers of the get&#xA;  method will not necessarily see a consistent state for the object.&amp;nbsp;&#xA;  The get method should be made synchronized." implements="_pZ_7uRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7vBdREeCWcbKUk5fWYg" rule="UG_SYNC_SET_UNSYNC_GET"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_7vRdREeCWcbKUk5fWYg" description="This method contains a switch statement where default case is missing.&#xA;  Usually you need to provide a default case." name="SF: Switch statement found where default case is missing">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7vhdREeCWcbKUk5fWYg" rule="SF_SWITCH_NO_DEFAULT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_7vxdREeCWcbKUk5fWYg" description="This method contains a switch statement where default case is missing.&#xA;  Usually you need to provide a default case." implements="_pZ_7vRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7wBdREeCWcbKUk5fWYg" rule="SF_SWITCH_NO_DEFAULT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_7wRdREeCWcbKUk5fWYg" description="Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized." name="Nm: Method names should start with a lower case letter">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7whdREeCWcbKUk5fWYg" rule="NM_METHOD_NAMING_CONVENTION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_7wxdREeCWcbKUk5fWYg" description="Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized." implements="_pZ_7wRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7xBdREeCWcbKUk5fWYg" rule="NM_METHOD_NAMING_CONVENTION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_7yRdREeCWcbKUk5fWYg" description="Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML)." name="Nm: Class names should start with an upper case letter">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7yhdREeCWcbKUk5fWYg" rule="NM_CLASS_NAMING_CONVENTION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_7yxdREeCWcbKUk5fWYg" description="Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML)." implements="_pZ_7yRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7zBdREeCWcbKUk5fWYg" rule="NM_CLASS_NAMING_CONVENTION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_70RdREeCWcbKUk5fWYg" description="The result of invoking readLine() is immediately dereferenced. If there are no more lines of text&#xA;to read, readLine() will return null and dereferencing that will generate a null pointer exception." name="NP: Immediate dereference of the result of readLine()">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_70hdREeCWcbKUk5fWYg" rule="NP_IMMEDIATE_DEREFERENCE_OF_READLINE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_70xdREeCWcbKUk5fWYg" description="The result of invoking readLine() is immediately dereferenced. If there are no more lines of text&#xA;to read, readLine() will return null and dereferencing that will generate a null pointer exception." implements="_pZ_70RdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_71BdREeCWcbKUk5fWYg" rule="NP_IMMEDIATE_DEREFERENCE_OF_READLINE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_71RdREeCWcbKUk5fWYg" description="There is a statement or branch on an exception path&#xA;&#x9;&#x9;&#x9;&#x9;that if executed guarantees that&#xA;&#x9;&#x9;&#x9;  a value is null at this point, and that &#xA;&#x9;&#x9;&#x9;  value that is guaranteed to be dereferenced&#xA;&#x9;&#x9;&#x9;  (except on forward paths involving runtime exceptions)." name="NP: Value is null and guaranteed to be dereferenced on exception path">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_71hdREeCWcbKUk5fWYg" rule="NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_71xdREeCWcbKUk5fWYg" description="There is a statement or branch on an exception path&#xA;&#x9;&#x9;&#x9;&#x9;that if executed guarantees that&#xA;&#x9;&#x9;&#x9;  a value is null at this point, and that &#xA;&#x9;&#x9;&#x9;  value that is guaranteed to be dereferenced&#xA;&#x9;&#x9;&#x9;  (except on forward paths involving runtime exceptions)." implements="_pZ_71RdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_72BdREeCWcbKUk5fWYg" rule="NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_72RdREeCWcbKUk5fWYg" description="This regular method has the same name as the class it is defined in. It is likely that this was intended to be a constructor.&#xA;      If it was intended to be a constructor, remove the declaration of a void return value.&#xA;&#x9;If you had accidently defined this method, realized the mistake, defined a proper constructor&#xA;&#x9;but can't get rid of this method due to backwards compatibility, deprecate the method." name="Nm: Apparent method/constructor confusion">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_72hdREeCWcbKUk5fWYg" rule="NM_METHOD_CONSTRUCTOR_CONFUSION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_72xdREeCWcbKUk5fWYg" description="This regular method has the same name as the class it is defined in. It is likely that this was intended to be a constructor.&#xA;      If it was intended to be a constructor, remove the declaration of a void return value.&#xA;&#x9;If you had accidently defined this method, realized the mistake, defined a proper constructor&#xA;&#x9;but can't get rid of this method due to backwards compatibility, deprecate the method." implements="_pZ_72RdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_73BdREeCWcbKUk5fWYg" rule="NM_METHOD_CONSTRUCTOR_CONFUSION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_78RdREeCWcbKUk5fWYg" description="As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. &#xA;Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the&#xA;application.&#xA;You may also experience serialization problems.&#xA;Using an instance field is recommended.&#xA;For more information on this see Sun Bug #6231579&#xA;and Sun Bug #6178997." name="STCAL: Static DateFormat">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_78hdREeCWcbKUk5fWYg" rule="STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_78xdREeCWcbKUk5fWYg" description="As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. &#xA;Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the&#xA;application.&#xA;You may also experience serialization problems.&#xA;Using an instance field is recommended.&#xA;For more information on this see Sun Bug #6231579&#xA;and Sun Bug #6178997." implements="_pZ_78RdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_79BdREeCWcbKUk5fWYg" rule="STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_79RdREeCWcbKUk5fWYg" description="The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed&#xA;in order to compile it in later versions of Java." name="Nm: Use of identifier that is a keyword in later versions of Java">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_79hdREeCWcbKUk5fWYg" rule="NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_79xdREeCWcbKUk5fWYg" description="The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed&#xA;in order to compile it in later versions of Java." implements="_pZ_79RdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7-BdREeCWcbKUk5fWYg" rule="NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_7-RdREeCWcbKUk5fWYg" description="This class has a writeObject() method which is synchronized;&#xA;  however, no other method of the class is synchronized." name="WS: Class's writeObject() method is synchronized but nothing else is">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7-hdREeCWcbKUk5fWYg" rule="WS_WRITEOBJECT_SYNC"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_7-xdREeCWcbKUk5fWYg" description="This class has a writeObject() method which is synchronized;&#xA;  however, no other method of the class is synchronized." implements="_pZ_7-RdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7_BdREeCWcbKUk5fWYg" rule="WS_WRITEOBJECT_SYNC"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_7_RdREeCWcbKUk5fWYg" description="This method defines a local variable with the same name as a field&#xA;in this class or a superclass.  This may cause the method to&#xA;read an uninitialized value from the field, leave the field uninitialized,&#xA;or both." name="MF: Method defines a variable that obscures a field">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_7_hdREeCWcbKUk5fWYg" rule="MF_METHOD_MASKS_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_7_xdREeCWcbKUk5fWYg" description="This method defines a local variable with the same name as a field&#xA;in this class or a superclass.  This may cause the method to&#xA;read an uninitialized value from the field, leave the field uninitialized,&#xA;or both." implements="_pZ_7_RdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8ABdREeCWcbKUk5fWYg" rule="MF_METHOD_MASKS_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_8BRdREeCWcbKUk5fWYg" description="As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. &#xA;The detector has found a call to an instance of DateFormat that has been obtained via a static&#xA;field. This looks suspicous.&#xA;For more information on this see Sun Bug #6231579&#xA;and Sun Bug #6178997." name="STCAL: Call to static DateFormat">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8BhdREeCWcbKUk5fWYg" rule="STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_8BxdREeCWcbKUk5fWYg" description="As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. &#xA;The detector has found a call to an instance of DateFormat that has been obtained via a static&#xA;field. This looks suspicous.&#xA;For more information on this see Sun Bug #6231579&#xA;and Sun Bug #6178997." implements="_pZ_8BRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8CBdREeCWcbKUk5fWYg" rule="STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_8ERdREeCWcbKUk5fWYg" description="close() is being invoked on a value that is always null. If this statement is executed,&#xA;a null pointer exception will occur. But the big risk here you never close&#xA;something that should be closed." name="NP: close() invoked on a value that is always null">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8EhdREeCWcbKUk5fWYg" rule="NP_CLOSING_NULL"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_8ExdREeCWcbKUk5fWYg" description="close() is being invoked on a value that is always null. If this statement is executed,&#xA;a null pointer exception will occur. But the big risk here you never close&#xA;something that should be closed." implements="_pZ_8ERdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8FBdREeCWcbKUk5fWYg" rule="NP_CLOSING_NULL"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_8FRdREeCWcbKUk5fWYg" description="This code generates a random signed integer and then computes&#xA;the remainder of that value modulo another value. Since the random&#xA;number can be negative, the result of the remainder operation&#xA;can also be negative. Be sure this is intended, and strongly&#xA;consider using the Random.nextInt(int) method instead." name="RV: Remainder of 32-bit signed random integer">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8FhdREeCWcbKUk5fWYg" rule="RV_REM_OF_RANDOM_INT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_8FxdREeCWcbKUk5fWYg" description="This code generates a random signed integer and then computes&#xA;the remainder of that value modulo another value. Since the random&#xA;number can be negative, the result of the remainder operation&#xA;can also be negative. Be sure this is intended, and strongly&#xA;consider using the Random.nextInt(int) method instead." implements="_pZ_8FRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8GBdREeCWcbKUk5fWYg" rule="RV_REM_OF_RANDOM_INT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_8GRdREeCWcbKUk5fWYg" description="This code seems to be using non-short-circuit logic (e.g., &amp;amp;&#xA;or |)&#xA;rather than short-circuit logic (&amp;amp;&amp;amp; or ||). In addition, &#xA;it seem possible that, depending on the value of the left hand side, you might not&#xA;want to evaluate the right hand side (because it would have side effects, could cause an exception&#xA;or could be expensive.&#xA;&#xA;Non-short-circuit logic causes both sides of the expression&#xA;to be evaluated even when the result can be inferred from&#xA;knowing the left-hand side. This can be less efficient and&#xA;can result in errors if the left-hand side guards cases&#xA;when evaluating the right-hand side can generate an error.&#xA;&#xA;&#xA;See the Java&#xA;Language Specification for details" name="NS: Potentially dangerous use of non-short-circuit logic">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8GhdREeCWcbKUk5fWYg" rule="NS_DANGEROUS_NON_SHORT_CIRCUIT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_8GxdREeCWcbKUk5fWYg" description="This code seems to be using non-short-circuit logic (e.g., &amp;amp;&#xA;or |)&#xA;rather than short-circuit logic (&amp;amp;&amp;amp; or ||). In addition, &#xA;it seem possible that, depending on the value of the left hand side, you might not&#xA;want to evaluate the right hand side (because it would have side effects, could cause an exception&#xA;or could be expensive.&#xA;&#xA;Non-short-circuit logic causes both sides of the expression&#xA;to be evaluated even when the result can be inferred from&#xA;knowing the left-hand side. This can be less efficient and&#xA;can result in errors if the left-hand side guards cases&#xA;when evaluating the right-hand side can generate an error.&#xA;&#xA;&#xA;See the Java&#xA;Language Specification for details" implements="_pZ_8GRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8HBdREeCWcbKUk5fWYg" rule="NS_DANGEROUS_NON_SHORT_CIRCUIT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_8HRdREeCWcbKUk5fWYg" description="This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class. However, since the field is marked as transient and not set in readObject or readResolve, it will contain the default value in any &#xA;deserialized instance of the class." name="Se: Transient field that isn't set by deserialization.">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8HhdREeCWcbKUk5fWYg" rule="SE_TRANSIENT_FIELD_NOT_RESTORED"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_8HxdREeCWcbKUk5fWYg" description="This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class. However, since the field is marked as transient and not set in readObject or readResolve, it will contain the default value in any &#xA;deserialized instance of the class." implements="_pZ_8HRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8IBdREeCWcbKUk5fWYg" rule="SE_TRANSIENT_FIELD_NOT_RESTORED"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_8JRdREeCWcbKUk5fWYg" description="This method synchronizes on an object&#xA;   referenced from a mutable field.&#xA;   This is unlikely to have useful semantics, since different&#xA;threads may be synchronizing on different objects." name="ML: Method synchronizes on an updated field">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8JhdREeCWcbKUk5fWYg" rule="ML_SYNC_ON_UPDATED_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_8JxdREeCWcbKUk5fWYg" description="This method synchronizes on an object&#xA;   referenced from a mutable field.&#xA;   This is unlikely to have useful semantics, since different&#xA;threads may be synchronizing on different objects." implements="_pZ_8JRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8KBdREeCWcbKUk5fWYg" rule="ML_SYNC_ON_UPDATED_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_8KRdREeCWcbKUk5fWYg" description="This method uses a static method from java.lang.Math on a constant value. This method's&#xA;result in this case, can be determined statically, and is faster and sometimes more accurate to&#xA;just use the constant. Methods detected are:&#xA;&#xA;&#xA;&#xA;   Method Parameter&#xA;&#xA;&#xA;   abs -any-&#xA;&#xA;&#xA;   acos 0.0 or 1.0&#xA;&#xA;&#xA;   asin 0.0 or 1.0&#xA;&#xA;&#xA;   atan 0.0 or 1.0&#xA;&#xA;&#xA;   atan2 0.0&#xA;&#xA;&#xA;   cbrt 0.0 or 1.0&#xA;&#xA;&#xA;   ceil -any-&#xA;&#xA;&#xA;   cos 0.0&#xA;&#xA;&#xA;   cosh 0.0&#xA;&#xA;&#xA;   exp 0.0 or 1.0&#xA;&#xA;&#xA;   expm1 0.0&#xA;&#xA;&#xA;   floor -any-&#xA;&#xA;&#xA;   log 0.0 or 1.0&#xA;&#xA;&#xA;   log10 0.0 or 1.0&#xA;&#xA;&#xA;   rint -any-&#xA;&#xA;&#xA;   round -any-&#xA;&#xA;&#xA;   sin 0.0&#xA;&#xA;&#xA;   sinh 0.0&#xA;&#xA;&#xA;   sqrt 0.0 or 1.0&#xA;&#xA;&#xA;   tan 0.0&#xA;&#xA;&#xA;   tanh 0.0&#xA;&#xA;&#xA;   toDegrees 0.0 or 1.0&#xA;&#xA;&#xA;   toRadians 0.0" name="UM: Method calls static Math class method on a constant value">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8KhdREeCWcbKUk5fWYg" rule="UM_UNNECESSARY_MATH"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_8KxdREeCWcbKUk5fWYg" description="This method uses a static method from java.lang.Math on a constant value. This method's&#xA;result in this case, can be determined statically, and is faster and sometimes more accurate to&#xA;just use the constant. Methods detected are:&#xA;&#xA;&#xA;&#xA;   Method Parameter&#xA;&#xA;&#xA;   abs -any-&#xA;&#xA;&#xA;   acos 0.0 or 1.0&#xA;&#xA;&#xA;   asin 0.0 or 1.0&#xA;&#xA;&#xA;   atan 0.0 or 1.0&#xA;&#xA;&#xA;   atan2 0.0&#xA;&#xA;&#xA;   cbrt 0.0 or 1.0&#xA;&#xA;&#xA;   ceil -any-&#xA;&#xA;&#xA;   cos 0.0&#xA;&#xA;&#xA;   cosh 0.0&#xA;&#xA;&#xA;   exp 0.0 or 1.0&#xA;&#xA;&#xA;   expm1 0.0&#xA;&#xA;&#xA;   floor -any-&#xA;&#xA;&#xA;   log 0.0 or 1.0&#xA;&#xA;&#xA;   log10 0.0 or 1.0&#xA;&#xA;&#xA;   rint -any-&#xA;&#xA;&#xA;   round -any-&#xA;&#xA;&#xA;   sin 0.0&#xA;&#xA;&#xA;   sinh 0.0&#xA;&#xA;&#xA;   sqrt 0.0 or 1.0&#xA;&#xA;&#xA;   tan 0.0&#xA;&#xA;&#xA;   tanh 0.0&#xA;&#xA;&#xA;   toDegrees 0.0 or 1.0&#xA;&#xA;&#xA;   toRadians 0.0" implements="_pZ_8KRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8LBdREeCWcbKUk5fWYg" rule="UM_UNNECESSARY_MATH"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_8LRdREeCWcbKUk5fWYg" description="This class defines a serialVersionUID field that is not final.&amp;nbsp;&#xA;  The field should be made final&#xA;   if it is intended to specify&#xA;   the version UID for purposes of serialization." name="Se: serialVersionUID isn't final">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8LhdREeCWcbKUk5fWYg" rule="SE_NONFINAL_SERIALVERSIONID"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_pZ_8LxdREeCWcbKUk5fWYg" description="This class defines a serialVersionUID field that is not final.&amp;nbsp;&#xA;  The field should be made final&#xA;   if it is intended to specify&#xA;   the version UID for purposes of serialization." implements="_pZ_8LRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8MBdREeCWcbKUk5fWYg" rule="SE_NONFINAL_SERIALVERSIONID"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_pZ_8NRdREeCWcbKUk5fWYg" description="This class is an inner class, but does not use its embedded reference&#xA;  to the object which created it.&amp;nbsp; This reference makes the instances&#xA;  of the class larger, and may keep the reference to the creator object&#xA;  alive longer than necessary.&amp;nbsp; If possible, the class should be&#xA;  made into a static inner class. Since anonymous inner&#xA;classes cannot be marked as static, doing this will require refactoring&#xA;the inner class so that it is a named inner class." name="SIC: Could be refactored into a named static inner class">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_pZ_8NhdREeCWcbKUk5fWYg" rule="SIC_INNER_SHOULD_BE_STATIC_ANON"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAiwBdREeCWcbKUk5fWYg" description="This class is an inner class, but does not use its embedded reference&#xA;  to the object which created it.&amp;nbsp; This reference makes the instances&#xA;  of the class larger, and may keep the reference to the creator object&#xA;  alive longer than necessary.&amp;nbsp; If possible, the class should be&#xA;  made into a static inner class. Since anonymous inner&#xA;classes cannot be marked as static, doing this will require refactoring&#xA;the inner class so that it is a named inner class." implements="_pZ_8NRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAiwRdREeCWcbKUk5fWYg" rule="SIC_INNER_SHOULD_BE_STATIC_ANON"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAiyhdREeCWcbKUk5fWYg" description="A final static field references a Hashtable&#xA;   and can be accessed by malicious code or&#xA;        by accident from another package.&#xA;   This code can freely modify the contents of the Hashtable." name="MS: Field is a mutable Hashtable">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAiyxdREeCWcbKUk5fWYg" rule="MS_MUTABLE_HASHTABLE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAizBdREeCWcbKUk5fWYg" description="A final static field references a Hashtable&#xA;   and can be accessed by malicious code or&#xA;        by accident from another package.&#xA;   This code can freely modify the contents of the Hashtable." implements="_paAiyhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAizRdREeCWcbKUk5fWYg" rule="MS_MUTABLE_HASHTABLE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAizhdREeCWcbKUk5fWYg" description="A value stored in the previous switch case is overwritten here due to a switch fall through. It is likely that&#xA;&#x9;you forgot to put a break or return at the end of the previous case." name="SF: Dead store due to switch statement fall through">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAizxdREeCWcbKUk5fWYg" rule="SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAi0BdREeCWcbKUk5fWYg" description="A value stored in the previous switch case is overwritten here due to a switch fall through. It is likely that&#xA;&#x9;you forgot to put a break or return at the end of the previous case." implements="_paAizhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAi0RdREeCWcbKUk5fWYg" rule="SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAi0hdREeCWcbKUk5fWYg" description="A possibly-null value is passed to a nonnull method parameter.&#xA;&#x9;Either the parameter is annotated as a parameter that should&#xA;&#x9;always be nonnull, or analysis has shown that it will always be &#xA;&#x9;dereferenced." name="NP: Non-virtual method call passes null for nonnull parameter">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAi0xdREeCWcbKUk5fWYg" rule="NP_NULL_PARAM_DEREF_NONVIRTUAL"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAi1BdREeCWcbKUk5fWYg" description="A possibly-null value is passed to a nonnull method parameter.&#xA;&#x9;Either the parameter is annotated as a parameter that should&#xA;&#x9;always be nonnull, or analysis has shown that it will always be &#xA;&#x9;dereferenced." implements="_paAi0hdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAi1RdREeCWcbKUk5fWYg" rule="NP_NULL_PARAM_DEREF_NONVIRTUAL"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAi2hdREeCWcbKUk5fWYg" description="The referenced methods have names that differ only by capitalization. &#xA;This is very confusing because if the capitalization were&#xA;identical then one of the methods would override the other." name="Nm: Very confusing method names">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAi2xdREeCWcbKUk5fWYg" rule="NM_VERY_CONFUSING"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAi3BdREeCWcbKUk5fWYg" description="The referenced methods have names that differ only by capitalization. &#xA;This is very confusing because if the capitalization were&#xA;identical then one of the methods would override the other." implements="_paAi2hdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAi3RdREeCWcbKUk5fWYg" rule="NM_VERY_CONFUSING"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAi4hdREeCWcbKUk5fWYg" description="The method creates a database resource (such as a database connection&#xA;or row set), does not assign it to any&#xA;fields, pass it to other methods, or return it, and does not appear to close&#xA;the object on all paths out of the method.&amp;nbsp; Failure to&#xA;close database resources on all paths out of a method may&#xA;result in poor performance, and could cause the application to&#xA;have problems communicating with the database." name="ODR: Method may fail to close database resource">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAi4xdREeCWcbKUk5fWYg" rule="ODR_OPEN_DATABASE_RESOURCE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAi5BdREeCWcbKUk5fWYg" description="The method creates a database resource (such as a database connection&#xA;or row set), does not assign it to any&#xA;fields, pass it to other methods, or return it, and does not appear to close&#xA;the object on all paths out of the method.&amp;nbsp; Failure to&#xA;close database resources on all paths out of a method may&#xA;result in poor performance, and could cause the application to&#xA;have problems communicating with the database." implements="_paAi4hdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAi5RdREeCWcbKUk5fWYg" rule="ODR_OPEN_DATABASE_RESOURCE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAi5hdREeCWcbKUk5fWYg" description="There is a statement or branch that if executed guarantees that&#xA;&#x9;&#x9;&#x9;  a value is null at this point, and that &#xA;&#x9;&#x9;&#x9;  value that is guaranteed to be dereferenced&#xA;&#x9;&#x9;&#x9;  (except on forward paths involving runtime exceptions)." name="NP: Null value is guaranteed to be dereferenced">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAi5xdREeCWcbKUk5fWYg" rule="NP_GUARANTEED_DEREF"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAi6BdREeCWcbKUk5fWYg" description="There is a statement or branch that if executed guarantees that&#xA;&#x9;&#x9;&#x9;  a value is null at this point, and that &#xA;&#x9;&#x9;&#x9;  value that is guaranteed to be dereferenced&#xA;&#x9;&#x9;&#x9;  (except on forward paths involving runtime exceptions)." implements="_paAi5hdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAi6RdREeCWcbKUk5fWYg" rule="NP_GUARANTEED_DEREF"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAi8hdREeCWcbKUk5fWYg" description="This method calls Object.wait() without obviously holding a lock&#xA;on the object.&amp;nbsp;  Calling wait() without a lock held will result in&#xA;an IllegalMonitorStateException being thrown." name="MWN: Mismatched wait()">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAi8xdREeCWcbKUk5fWYg" rule="MWN_MISMATCHED_WAIT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAi9BdREeCWcbKUk5fWYg" description="This method calls Object.wait() without obviously holding a lock&#xA;on the object.&amp;nbsp;  Calling wait() without a lock held will result in&#xA;an IllegalMonitorStateException being thrown." implements="_paAi8hdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAi9RdREeCWcbKUk5fWYg" rule="MWN_MISMATCHED_WAIT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAi9hdREeCWcbKUk5fWYg" description="This class extends from a Struts Action class, and uses an instance member variable. Since only&#xA;    one instance of a struts Action class is created by the Struts framework, and used in a&#xA;    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider&#xA;    only using method local variables. Only instance fields that are written outside of a monitor&#xA;    are reported." name="MTIA: Class extends Struts Action class and uses instance variables">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAi9xdREeCWcbKUk5fWYg" rule="MTIA_SUSPECT_STRUTS_INSTANCE_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAi-BdREeCWcbKUk5fWYg" description="This class extends from a Struts Action class, and uses an instance member variable. Since only&#xA;    one instance of a struts Action class is created by the Struts framework, and used in a&#xA;    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider&#xA;    only using method local variables. Only instance fields that are written outside of a monitor&#xA;    are reported." implements="_paAi9hdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAi-RdREeCWcbKUk5fWYg" rule="MTIA_SUSPECT_STRUTS_INSTANCE_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAi_hdREeCWcbKUk5fWYg" description="The code invokes toString on an (anonymous) array.  Calling toString on an array generates a fairly useless result&#xA;such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable&#xA;String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12." name="USELESS_STRING: Invocation of toString on an array">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAi_xdREeCWcbKUk5fWYg" rule="DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAjABdREeCWcbKUk5fWYg" description="The code invokes toString on an (anonymous) array.  Calling toString on an array generates a fairly useless result&#xA;such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable&#xA;String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12." implements="_paAi_hdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAjARdREeCWcbKUk5fWYg" rule="DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAjAhdREeCWcbKUk5fWYg" description="This method ignores the return value of&#xA;  java.io.InputStream.skip() which can skip multiple bytes.&amp;nbsp;&#xA;  If the return value is not checked, the caller will not be able to correctly&#xA;  handle the case where fewer bytes were skipped than the caller requested.&amp;nbsp;&#xA;  This is a particularly insidious kind of bug, because in many programs,&#xA;  skips from input streams usually do skip the full amount of data requested,&#xA;  causing the program to fail only sporadically. With Buffered streams, however,&#xA;  skip() will only skip data in the buffer, and will routinely fail to skip the&#xA;  requested number of bytes." name="RR: Method ignores results of InputStream.skip()">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAjAxdREeCWcbKUk5fWYg" rule="SR_NOT_CHECKED"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAjBBdREeCWcbKUk5fWYg" description="This method ignores the return value of&#xA;  java.io.InputStream.skip() which can skip multiple bytes.&amp;nbsp;&#xA;  If the return value is not checked, the caller will not be able to correctly&#xA;  handle the case where fewer bytes were skipped than the caller requested.&amp;nbsp;&#xA;  This is a particularly insidious kind of bug, because in many programs,&#xA;  skips from input streams usually do skip the full amount of data requested,&#xA;  causing the program to fail only sporadically. With Buffered streams, however,&#xA;  skip() will only skip data in the buffer, and will routinely fail to skip the&#xA;  requested number of bytes." implements="_paAjAhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAjBRdREeCWcbKUk5fWYg" rule="SR_NOT_CHECKED"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAjBhdREeCWcbKUk5fWYg" description="This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this untrusted input allows&#xA;for a reflected cross site scripting&#xA;vulnerability. See http://en.wikipedia.org/wiki/Cross-site_scripting&#xA;for more information.&#xA;FindBugs looks only for the most blatant, obvious cases of cross site scripting.&#xA;If FindBugs found any, you almost certainly have more cross site scripting&#xA;vulnerabilities that FindBugs doesn't report. If you are concerned about cross site scripting, you should seriously &#xA;consider using a commercial static analysis or pen-testing tool." name="XSS: Servlet reflected cross site scripting vulnerability">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAjBxdREeCWcbKUk5fWYg" rule="XSS_REQUEST_PARAMETER_TO_SEND_ERROR"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAjCBdREeCWcbKUk5fWYg" description="This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this untrusted input allows&#xA;for a reflected cross site scripting&#xA;vulnerability. See http://en.wikipedia.org/wiki/Cross-site_scripting&#xA;for more information.&#xA;FindBugs looks only for the most blatant, obvious cases of cross site scripting.&#xA;If FindBugs found any, you almost certainly have more cross site scripting&#xA;vulnerabilities that FindBugs doesn't report. If you are concerned about cross site scripting, you should seriously &#xA;consider using a commercial static analysis or pen-testing tool." implements="_paAjBhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAjCRdREeCWcbKUk5fWYg" rule="XSS_REQUEST_PARAMETER_TO_SEND_ERROR"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAjEhdREeCWcbKUk5fWYg" description="This method contains an unsynchronized lazy initialization of a non-volatile static field.&#xA;Because the compiler or processor may reorder instructions,&#xA;threads are not guaranteed to see a completely initialized object,&#xA;if the method can be called by multiple threads.&#xA;You can make the field volatile to correct the problem.&#xA;For more information, see the&#xA;Java Memory Model web site." name="LI: Incorrect lazy initialization of static field">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAjExdREeCWcbKUk5fWYg" rule="LI_LAZY_INIT_STATIC"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAjFBdREeCWcbKUk5fWYg" description="This method contains an unsynchronized lazy initialization of a non-volatile static field.&#xA;Because the compiler or processor may reorder instructions,&#xA;threads are not guaranteed to see a completely initialized object,&#xA;if the method can be called by multiple threads.&#xA;You can make the field volatile to correct the problem.&#xA;For more information, see the&#xA;Java Memory Model web site." implements="_paAjEhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAjFRdREeCWcbKUk5fWYg" rule="LI_LAZY_INIT_STATIC"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAjGhdREeCWcbKUk5fWYg" description="This method may return a null value, but the method (or a superclass method&#xA;      which it overrides) is declared to return @NonNull." name="NP: Method may return null, but is declared @NonNull">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAjGxdREeCWcbKUk5fWYg" rule="NP_NONNULL_RETURN_VIOLATION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAjHBdREeCWcbKUk5fWYg" description="This method may return a null value, but the method (or a superclass method&#xA;      which it overrides) is declared to return @NonNull." implements="_paAjGhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAjHRdREeCWcbKUk5fWYg" rule="NP_NONNULL_RETURN_VIOLATION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAjLhdREeCWcbKUk5fWYg" description="A value specified as carrying a type qualifier annotation is&#xA;        consumed in a location or locations requiring that the value not&#xA;        carry that annotation.&#xA;        &#xA;        &#xA;        &#xA;        More precisely, a value annotated with a type qualifier specifying when=ALWAYS&#xA;        is guaranteed to reach a use or uses where the same type qualifier specifies when=NEVER.&#xA;        &#xA;        &#xA;        &#xA;        For example, say that @NonNegative is a nickname for&#xA;        the type qualifier annotation @Negative(when=When.NEVER).&#xA;        The following code will generate this warning because&#xA;        the return statement requires a @NonNegative value,&#xA;        but receives one that is marked as @Negative.   &#xA;        &#xA;        &#xA;&#xA;public @NonNegative Integer example(@Negative Integer value) {&#xA;    return value;&#xA;}" name="TQ: Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAjLxdREeCWcbKUk5fWYg" rule="TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAjMBdREeCWcbKUk5fWYg" description="A value specified as carrying a type qualifier annotation is&#xA;        consumed in a location or locations requiring that the value not&#xA;        carry that annotation.&#xA;        &#xA;        &#xA;        &#xA;        More precisely, a value annotated with a type qualifier specifying when=ALWAYS&#xA;        is guaranteed to reach a use or uses where the same type qualifier specifies when=NEVER.&#xA;        &#xA;        &#xA;        &#xA;        For example, say that @NonNegative is a nickname for&#xA;        the type qualifier annotation @Negative(when=When.NEVER).&#xA;        The following code will generate this warning because&#xA;        the return statement requires a @NonNegative value,&#xA;        but receives one that is marked as @Negative.   &#xA;        &#xA;        &#xA;&#xA;public @NonNegative Integer example(@Negative Integer value) {&#xA;    return value;&#xA;}" implements="_paAjLhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAjMRdREeCWcbKUk5fWYg" rule="TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAjOhdREeCWcbKUk5fWYg" description="This method spins in a loop which reads a field.&amp;nbsp; The compiler&#xA;  may legally hoist the read out of the loop, turning the code into an&#xA;  infinite loop.&amp;nbsp; The class should be changed so it uses proper&#xA;  synchronization (including wait and notify calls)." name="SP: Method spins on field">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAjOxdREeCWcbKUk5fWYg" rule="SP_SPIN_ON_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paAjPBdREeCWcbKUk5fWYg" description="This method spins in a loop which reads a field.&amp;nbsp; The compiler&#xA;  may legally hoist the read out of the loop, turning the code into an&#xA;  infinite loop.&amp;nbsp; The class should be changed so it uses proper&#xA;  synchronization (including wait and notify calls)." implements="_paAjOhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paAjPRdREeCWcbKUk5fWYg" rule="SP_SPIN_ON_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paAjPhdREeCWcbKUk5fWYg" description="A final static field that is&#xA;defined in an interface references a mutable&#xA;   object such as an array or hashtable.&#xA;   This mutable object could&#xA;   be changed by malicious code or&#xA;        by accident from another package.&#xA;   To solve this, the field needs to be moved to a class&#xA;   and made package protected&#xA;   to avoid&#xA;        this vulnerability." name="MS: Field should be moved out of an interface and made package protected">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ0BdREeCWcbKUk5fWYg" rule="MS_OOI_PKGPROTECT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBJ0RdREeCWcbKUk5fWYg" description="A final static field that is&#xA;defined in an interface references a mutable&#xA;   object such as an array or hashtable.&#xA;   This mutable object could&#xA;   be changed by malicious code or&#xA;        by accident from another package.&#xA;   To solve this, the field needs to be moved to a class&#xA;   and made package protected&#xA;   to avoid&#xA;        this vulnerability." implements="_paAjPhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ0hdREeCWcbKUk5fWYg" rule="MS_OOI_PKGPROTECT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBJ2xdREeCWcbKUk5fWYg" description="This instance method writes to a static field. This is tricky to get&#xA;correct if multiple instances are being manipulated,&#xA;and generally bad practice." name="ST: Write to static field from instance method">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ3BdREeCWcbKUk5fWYg" rule="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBJ3RdREeCWcbKUk5fWYg" description="This instance method writes to a static field. This is tricky to get&#xA;correct if multiple instances are being manipulated,&#xA;and generally bad practice." implements="_paBJ2xdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ3hdREeCWcbKUk5fWYg" rule="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBJ3xdREeCWcbKUk5fWYg" description="This code seems to be using non-short-circuit logic (e.g., &amp;amp;&#xA;or |)&#xA;rather than short-circuit logic (&amp;amp;&amp;amp; or ||).&#xA;Non-short-circuit logic causes both sides of the expression&#xA;to be evaluated even when the result can be inferred from&#xA;knowing the left-hand side. This can be less efficient and&#xA;can result in errors if the left-hand side guards cases&#xA;when evaluating the right-hand side can generate an error.&#xA;&#xA;See the Java&#xA;Language Specification for details" name="NS: Questionable use of non-short-circuit logic">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ4BdREeCWcbKUk5fWYg" rule="NS_NON_SHORT_CIRCUIT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBJ4RdREeCWcbKUk5fWYg" description="This code seems to be using non-short-circuit logic (e.g., &amp;amp;&#xA;or |)&#xA;rather than short-circuit logic (&amp;amp;&amp;amp; or ||).&#xA;Non-short-circuit logic causes both sides of the expression&#xA;to be evaluated even when the result can be inferred from&#xA;knowing the left-hand side. This can be less efficient and&#xA;can result in errors if the left-hand side guards cases&#xA;when evaluating the right-hand side can generate an error.&#xA;&#xA;See the Java&#xA;Language Specification for details" implements="_paBJ3xdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ4hdREeCWcbKUk5fWYg" rule="NS_NON_SHORT_CIRCUIT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBJ4xdREeCWcbKUk5fWYg" description="This toString method seems to return null in some circumstances. A liberal reading of the&#xA;&#x9;spec could be interpreted as allowing this, but it is probably a bad idea and could cause&#xA;&#x9;other code to break. Return the empty string or some other appropriate string rather than null." name="NP: toString method may return null">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ5BdREeCWcbKUk5fWYg" rule="NP_TOSTRING_COULD_RETURN_NULL"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBJ5RdREeCWcbKUk5fWYg" description="This toString method seems to return null in some circumstances. A liberal reading of the&#xA;&#x9;spec could be interpreted as allowing this, but it is probably a bad idea and could cause&#xA;&#x9;other code to break. Return the empty string or some other appropriate string rather than null." implements="_paBJ4xdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ5hdREeCWcbKUk5fWYg" rule="NP_TOSTRING_COULD_RETURN_NULL"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBJ5xdREeCWcbKUk5fWYg" description="The result of invoking readLine() is dereferenced without checking to see if the result is null. If there are no more lines of text&#xA;to read, readLine() will return null and dereferencing that will generate a null pointer exception." name="NP: Dereference of the result of readLine() without nullcheck">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ6BdREeCWcbKUk5fWYg" rule="NP_DEREFERENCE_OF_READLINE_VALUE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBJ6RdREeCWcbKUk5fWYg" description="The result of invoking readLine() is dereferenced without checking to see if the result is null. If there are no more lines of text&#xA;to read, readLine() will return null and dereferencing that will generate a null pointer exception." implements="_paBJ5xdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ6hdREeCWcbKUk5fWYg" rule="NP_DEREFERENCE_OF_READLINE_VALUE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBJ6xdREeCWcbKUk5fWYg" description="The method invokes the execute method on an SQL statement with a String that seems&#xA;to be dynamically generated. Consider using&#xA;a prepared statement instead. It is more efficient and less vulnerable to&#xA;SQL injection attacks." name="SQL: Nonconstant string passed to execute method on an SQL statement">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ7BdREeCWcbKUk5fWYg" rule="SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBJ7RdREeCWcbKUk5fWYg" description="The method invokes the execute method on an SQL statement with a String that seems&#xA;to be dynamically generated. Consider using&#xA;a prepared statement instead. It is more efficient and less vulnerable to&#xA;SQL injection attacks." implements="_paBJ6xdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ7hdREeCWcbKUk5fWYg" rule="SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBJ7xdREeCWcbKUk5fWYg" description="This method calls Object.notify() or Object.notifyAll() without obviously holding a lock&#xA;on the object.&amp;nbsp;  Calling notify() or notifyAll() without a lock held will result in&#xA;an IllegalMonitorStateException being thrown." name="MWN: Mismatched notify()">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ8BdREeCWcbKUk5fWYg" rule="MWN_MISMATCHED_NOTIFY"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBJ8RdREeCWcbKUk5fWYg" description="This method calls Object.notify() or Object.notifyAll() without obviously holding a lock&#xA;on the object.&amp;nbsp;  Calling notify() or notifyAll() without a lock held will result in&#xA;an IllegalMonitorStateException being thrown." implements="_paBJ7xdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ8hdREeCWcbKUk5fWYg" rule="MWN_MISMATCHED_NOTIFY"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBJ-xdREeCWcbKUk5fWYg" description="This method contains a useless control flow statement, where&#xA;control flow continues onto the same place regardless of whether or not&#xA;the branch is taken. For example,&#xA;this is caused by having an empty statement&#xA;block for an if statement:&#xA;&#xA;    if (argv.length == 0) {&#xA;&#x9;// TODO: handle this case&#xA;&#x9;}" name="UCF: Useless control flow">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ_BdREeCWcbKUk5fWYg" rule="UCF_USELESS_CONTROL_FLOW"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBJ_RdREeCWcbKUk5fWYg" description="This method contains a useless control flow statement, where&#xA;control flow continues onto the same place regardless of whether or not&#xA;the branch is taken. For example,&#xA;this is caused by having an empty statement&#xA;block for an if statement:&#xA;&#xA;    if (argv.length == 0) {&#xA;&#x9;// TODO: handle this case&#xA;&#x9;}" implements="_paBJ-xdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBJ_hdREeCWcbKUk5fWYg" rule="UCF_USELESS_CONTROL_FLOW"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBJ_xdREeCWcbKUk5fWYg" description="The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match&#xA;the type of the corresponding parameter in the superclass. For example, if you have:&#xA;&#xA;&#xA;&#xA;import alpha.Foo;&#xA;public class A {&#xA;  public int f(Foo x) { return 17; }&#xA;}&#xA;----&#xA;import beta.Foo;&#xA;public class B extends A {&#xA;  public int f(Foo x) { return 42; }&#xA;}&#xA;&#xA;&#xA;&#xA;The f(Foo) method defined in class B doesn't&#xA;override the &#xA;f(Foo) method defined in class A, because the argument&#xA;types are Foo's from different packages." name="Nm: Method doesn't override method in superclass due to wrong package for parameter">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKABdREeCWcbKUk5fWYg" rule="NM_WRONG_PACKAGE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBKARdREeCWcbKUk5fWYg" description="The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match&#xA;the type of the corresponding parameter in the superclass. For example, if you have:&#xA;&#xA;&#xA;&#xA;import alpha.Foo;&#xA;public class A {&#xA;  public int f(Foo x) { return 17; }&#xA;}&#xA;----&#xA;import beta.Foo;&#xA;public class B extends A {&#xA;  public int f(Foo x) { return 42; }&#xA;}&#xA;&#xA;&#xA;&#xA;The f(Foo) method defined in class B doesn't&#xA;override the &#xA;f(Foo) method defined in class A, because the argument&#xA;types are Foo's from different packages." implements="_paBJ_xdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKAhdREeCWcbKUk5fWYg" rule="NM_WRONG_PACKAGE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBKAxdREeCWcbKUk5fWYg" description="This serializable class defines a readObject() which is&#xA;  synchronized.&amp;nbsp; By definition, an object created by deserialization&#xA;  is only reachable by one thread, and thus there is no need for&#xA;  readObject() to be synchronized.&amp;nbsp; If the readObject()&#xA;  method itself is causing the object to become visible to another thread,&#xA;  that is an example of very dubious coding style." name="RS: Class's readObject() method is synchronized">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKBBdREeCWcbKUk5fWYg" rule="RS_READOBJECT_SYNC"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBKBRdREeCWcbKUk5fWYg" description="This serializable class defines a readObject() which is&#xA;  synchronized.&amp;nbsp; By definition, an object created by deserialization&#xA;  is only reachable by one thread, and thus there is no need for&#xA;  readObject() to be synchronized.&amp;nbsp; If the readObject()&#xA;  method itself is causing the object to become visible to another thread,&#xA;  that is an example of very dubious coding style." implements="_paBKAxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKBhdREeCWcbKUk5fWYg" rule="RS_READOBJECT_SYNC"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBKCxdREeCWcbKUk5fWYg" description="This method contains a reference known to be non-null with another reference&#xA;known to be null." name="RCN: Redundant comparison of non-null value to null">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKDBdREeCWcbKUk5fWYg" rule="RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBKDRdREeCWcbKUk5fWYg" description="This method contains a reference known to be non-null with another reference&#xA;known to be null." implements="_paBKCxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKDhdREeCWcbKUk5fWYg" rule="RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBKIxdREeCWcbKUk5fWYg" description="This method accesses the value of a Map entry, using a key that was retrieved from&#xA;a keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the&#xA;Map.get(key) lookup." name="WMI: Inefficient use of keySet iterator instead of entrySet iterator">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKJBdREeCWcbKUk5fWYg" rule="WMI_WRONG_MAP_ITERATOR"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBKJRdREeCWcbKUk5fWYg" description="This method accesses the value of a Map entry, using a key that was retrieved from&#xA;a keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the&#xA;Map.get(key) lookup." implements="_paBKIxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKJhdREeCWcbKUk5fWYg" rule="WMI_WRONG_MAP_ITERATOR"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBKKxdREeCWcbKUk5fWYg" description="Are you sure this for loop is incrementing the correct variable?&#xA;   It appears that another variable is being initialized and checked&#xA;   by the for loop." name="QF: Complicated, subtle or wrong increment in for-loop">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKLBdREeCWcbKUk5fWYg" rule="QF_QUESTIONABLE_FOR_LOOP"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBKLRdREeCWcbKUk5fWYg" description="Are you sure this for loop is incrementing the correct variable?&#xA;   It appears that another variable is being initialized and checked&#xA;   by the for loop." implements="_paBKKxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKLhdREeCWcbKUk5fWYg" rule="QF_QUESTIONABLE_FOR_LOOP"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBKNxdREeCWcbKUk5fWYg" description="The code contains a conditional test is performed twice, one right after the other&#xA;(e.g., x == 0 || x == 0). Perhaps the second occurrence is intended to be something else&#xA;(e.g., x == 0 || y == 0)." name="RpC: Repeated conditional tests">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKOBdREeCWcbKUk5fWYg" rule="RpC_REPEATED_CONDITIONAL_TEST"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBKORdREeCWcbKUk5fWYg" description="The code contains a conditional test is performed twice, one right after the other&#xA;(e.g., x == 0 || x == 0). Perhaps the second occurrence is intended to be something else&#xA;(e.g., x == 0 || y == 0)." implements="_paBKNxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKOhdREeCWcbKUk5fWYg" rule="RpC_REPEATED_CONDITIONAL_TEST"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBKOxdREeCWcbKUk5fWYg" description="This Serializable class is an inner class.  Any attempt to serialize&#xA;it will also serialize the associated outer instance. The outer instance is serializable,&#xA;so this won't fail, but it might serialize a lot more data than intended.&#xA;If possible, making the inner class a static inner class (also known as a nested class) should solve the &#xA;problem." name="Se: Serializable inner class">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKPBdREeCWcbKUk5fWYg" rule="SE_INNER_CLASS"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBKPRdREeCWcbKUk5fWYg" description="This Serializable class is an inner class.  Any attempt to serialize&#xA;it will also serialize the associated outer instance. The outer instance is serializable,&#xA;so this won't fail, but it might serialize a lot more data than intended.&#xA;If possible, making the inner class a static inner class (also known as a nested class) should solve the &#xA;problem." implements="_paBKOxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKPhdREeCWcbKUk5fWYg" rule="SE_INNER_CLASS"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBKPxdREeCWcbKUk5fWYg" description="The return value of this method should be checked. One common&#xA;cause of this warning is to invoke a method on an immutable object,&#xA;thinking that it updates the object. For example, in the following code&#xA;fragment,&#xA;&#xA;&#xA;String dateString = getHeaderField(name);&#xA;dateString.trim();&#xA;&#xA;&#xA;the programmer seems to be thinking that the trim() method will update&#xA;the String referenced by dateString. But since Strings are immutable, the trim()&#xA;function returns a new String value, which is being ignored here. The code&#xA;should be corrected to: &#xA;&#xA;&#xA;String dateString = getHeaderField(name);&#xA;dateString = dateString.trim();" name="RV: Method ignores return value">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKQBdREeCWcbKUk5fWYg" rule="RV_RETURN_VALUE_IGNORED"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBKQRdREeCWcbKUk5fWYg" description="The return value of this method should be checked. One common&#xA;cause of this warning is to invoke a method on an immutable object,&#xA;thinking that it updates the object. For example, in the following code&#xA;fragment,&#xA;&#xA;&#xA;String dateString = getHeaderField(name);&#xA;dateString.trim();&#xA;&#xA;&#xA;the programmer seems to be thinking that the trim() method will update&#xA;the String referenced by dateString. But since Strings are immutable, the trim()&#xA;function returns a new String value, which is being ignored here. The code&#xA;should be corrected to: &#xA;&#xA;&#xA;String dateString = getHeaderField(name);&#xA;dateString = dateString.trim();" implements="_paBKPxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBKQhdREeCWcbKUk5fWYg" rule="RV_RETURN_VALUE_IGNORED"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBw5xdREeCWcbKUk5fWYg" description="This method acquires a JSR-166 (java.util.concurrent) lock,&#xA;but does not release it on all paths out of the method.  In general, the correct idiom&#xA;for using a JSR-166 lock is:&#xA;&#xA;&#xA;    Lock l = ...;&#xA;    l.lock();&#xA;    try {&#xA;        // do something&#xA;    } finally {&#xA;        l.unlock();&#xA;    }" name="UL: Method does not release lock on all paths">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBw6BdREeCWcbKUk5fWYg" rule="UL_UNRELEASED_LOCK"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBw6RdREeCWcbKUk5fWYg" description="This method acquires a JSR-166 (java.util.concurrent) lock,&#xA;but does not release it on all paths out of the method.  In general, the correct idiom&#xA;for using a JSR-166 lock is:&#xA;&#xA;&#xA;    Lock l = ...;&#xA;    l.lock();&#xA;    try {&#xA;        // do something&#xA;    } finally {&#xA;        l.unlock();&#xA;    }" implements="_paBw5xdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBw6hdREeCWcbKUk5fWYg" rule="UL_UNRELEASED_LOCK"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBw6xdREeCWcbKUk5fWYg" description="This class defines a method equal(Object).&amp;nbsp; This method does&#xA;not override the equals(Object) method in java.lang.Object,&#xA;which is probably what was intended." name="Nm: Class defines equal(Object); should it be equals(Object)?">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBw7BdREeCWcbKUk5fWYg" rule="NM_BAD_EQUAL"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBw7RdREeCWcbKUk5fWYg" description="This class defines a method equal(Object).&amp;nbsp; This method does&#xA;not override the equals(Object) method in java.lang.Object,&#xA;which is probably what was intended." implements="_paBw6xdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBw7hdREeCWcbKUk5fWYg" rule="NM_BAD_EQUAL"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBw-xdREeCWcbKUk5fWYg" description="This class is an inner class, but does not use its embedded reference&#xA;  to the object which created it except during construction of the&#xA;inner object.&amp;nbsp; This reference makes the instances&#xA;  of the class larger, and may keep the reference to the creator object&#xA;  alive longer than necessary.&amp;nbsp; If possible, the class should be&#xA;  made into a static inner class. Since the reference to the&#xA;   outer object is required during construction of the inner instance,&#xA;   the inner class will need to be refactored so as to&#xA;   pass a reference to the outer instance to the constructor&#xA;   for the inner class." name="SIC: Could be refactored into a static inner class">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBw_BdREeCWcbKUk5fWYg" rule="SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBw_RdREeCWcbKUk5fWYg" description="This class is an inner class, but does not use its embedded reference&#xA;  to the object which created it except during construction of the&#xA;inner object.&amp;nbsp; This reference makes the instances&#xA;  of the class larger, and may keep the reference to the creator object&#xA;  alive longer than necessary.&amp;nbsp; If possible, the class should be&#xA;  made into a static inner class. Since the reference to the&#xA;   outer object is required during construction of the inner instance,&#xA;   the inner class will need to be refactored so as to&#xA;   pass a reference to the outer instance to the constructor&#xA;   for the inner class." implements="_paBw-xdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBw_hdREeCWcbKUk5fWYg" rule="SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBw_xdREeCWcbKUk5fWYg" description="This code generates a random signed integer and then computes&#xA;the absolute value of that random integer.  If the number returned by the random number&#xA;generator is Integer.MIN_VALUE, then the result will be negative as well (since &#xA;Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE)." name="RV: Bad attempt to compute absolute value of signed 32-bit random integer">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxABdREeCWcbKUk5fWYg" rule="RV_ABSOLUTE_VALUE_OF_RANDOM_INT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBxARdREeCWcbKUk5fWYg" description="This code generates a random signed integer and then computes&#xA;the absolute value of that random integer.  If the number returned by the random number&#xA;generator is Integer.MIN_VALUE, then the result will be negative as well (since &#xA;Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE)." implements="_paBw_xdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxAhdREeCWcbKUk5fWYg" rule="RV_ABSOLUTE_VALUE_OF_RANDOM_INT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBxAxdREeCWcbKUk5fWYg" description="It is often a better design to&#xA;return a length zero array rather than a null reference to indicate that there&#xA;are no results (i.e., an empty list of results).&#xA;This way, no explicit check for null is needed by clients of the method.&#xA;&#xA;On the other hand, using null to indicate&#xA;&quot;there is no answer to this question&quot; is probably appropriate.&#xA;For example, File.listFiles() returns an empty list&#xA;if given a directory containing no files, and returns null if the file&#xA;is not a directory." name="PZLA: Consider returning a zero length array rather than null">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxBBdREeCWcbKUk5fWYg" rule="PZLA_PREFER_ZERO_LENGTH_ARRAYS"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBxBRdREeCWcbKUk5fWYg" description="It is often a better design to&#xA;return a length zero array rather than a null reference to indicate that there&#xA;are no results (i.e., an empty list of results).&#xA;This way, no explicit check for null is needed by clients of the method.&#xA;&#xA;On the other hand, using null to indicate&#xA;&quot;there is no answer to this question&quot; is probably appropriate.&#xA;For example, File.listFiles() returns an empty list&#xA;if given a directory containing no files, and returns null if the file&#xA;is not a directory." implements="_paBxAxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxBhdREeCWcbKUk5fWYg" rule="PZLA_PREFER_ZERO_LENGTH_ARRAYS"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBxGRdREeCWcbKUk5fWYg" description="This cast is unchecked, and not all instances of the type casted from can be cast to&#xA;the type it is being cast to. Ensure that your program logic ensures that this&#xA;cast will not fail.">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxGhdREeCWcbKUk5fWYg" rule="BC_UNCONFIRMED_CAST"/>
    <implements xsi:type="qm:Measure" href="../../current/java.qm#_paBxFxdREeCWcbKUk5fWYg"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBxHxdREeCWcbKUk5fWYg" description="A mutable static field could be changed by malicious code or&#xA;        by accident from another package.&#xA;   Unfortunately, the way the field is used doesn't allow&#xA;   any easy fix to this problem." name="MS: Field isn't final and can't be protected from malicious code">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxIBdREeCWcbKUk5fWYg" rule="MS_CANNOT_BE_FINAL"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBxIRdREeCWcbKUk5fWYg" description="A mutable static field could be changed by malicious code or&#xA;        by accident from another package.&#xA;   Unfortunately, the way the field is used doesn't allow&#xA;   any easy fix to this problem." implements="_paBxHxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxIhdREeCWcbKUk5fWYg" rule="MS_CANNOT_BE_FINAL"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBxIxdREeCWcbKUk5fWYg" description="This code stores a reference to an externally mutable object into a static&#xA;   field.&#xA;   If unchecked changes to&#xA;   the mutable object would compromise security or other&#xA;   important properties, you will need to do something different.&#xA;  Storing a copy of the object is better approach in many situations." name="MS: May expose internal static state by storing a mutable object into a static field">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxJBdREeCWcbKUk5fWYg" rule="EI_EXPOSE_STATIC_REP2"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBxJRdREeCWcbKUk5fWYg" description="This code stores a reference to an externally mutable object into a static&#xA;   field.&#xA;   If unchecked changes to&#xA;   the mutable object would compromise security or other&#xA;   important properties, you will need to do something different.&#xA;  Storing a copy of the object is better approach in many situations." implements="_paBxIxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxJhdREeCWcbKUk5fWYg" rule="EI_EXPOSE_STATIC_REP2"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBxJxdREeCWcbKUk5fWYg" description="The code here uses a regular expression that is invalid according to the syntax&#xA;for regular expressions. This statement will throw a PatternSyntaxException when&#xA;executed." name="RE: Invalid syntax for regular expression">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxKBdREeCWcbKUk5fWYg" rule="RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBxKRdREeCWcbKUk5fWYg" description="The code here uses a regular expression that is invalid according to the syntax&#xA;for regular expressions. This statement will throw a PatternSyntaxException when&#xA;executed." implements="_paBxJxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxKhdREeCWcbKUk5fWYg" rule="RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBxLxdREeCWcbKUk5fWYg" description="This class declares that it implements an interface that is also implemented by a superclass.&#xA;    This is redundant because once a superclass implements an interface, all subclasses by default also&#xA;    implement this interface. It may point out that the inheritance hierarchy has changed since&#xA;    this class was created, and consideration should be given to the ownership of&#xA;    the interface's implementation." name="RI: Class implements same interface as superclass">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxMBdREeCWcbKUk5fWYg" rule="RI_REDUNDANT_INTERFACES"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBxMRdREeCWcbKUk5fWYg" description="This class declares that it implements an interface that is also implemented by a superclass.&#xA;    This is redundant because once a superclass implements an interface, all subclasses by default also&#xA;    implement this interface. It may point out that the inheritance hierarchy has changed since&#xA;    this class was created, and consideration should be given to the ownership of&#xA;    the interface's implementation." implements="_paBxLxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxMhdREeCWcbKUk5fWYg" rule="RI_REDUNDANT_INTERFACES"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBxOxdREeCWcbKUk5fWYg" description="This parameter is always used in a way that requires it to be nonnull,&#xA;but the parameter is explicitly annotated as being Nullable. Either the use&#xA;of the parameter or the annotation is wrong." name="NP: Parameter must be nonnull but is marked as nullable">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxPBdREeCWcbKUk5fWYg" rule="NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBxPRdREeCWcbKUk5fWYg" description="This parameter is always used in a way that requires it to be nonnull,&#xA;but the parameter is explicitly annotated as being Nullable. Either the use&#xA;of the parameter or the annotation is wrong." implements="_paBxOxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxPhdREeCWcbKUk5fWYg" rule="NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBxPxdREeCWcbKUk5fWYg" description="Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multihtreaded use. &#xA;Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the&#xA;application. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see&#xA;random ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().&#xA;You may also experience serialization problems.&#xA;Using an instance field is recommended.&#xA;For more information on this see Sun Bug #6231579&#xA;and Sun Bug #6178997." name="STCAL: Static Calendar">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxQBdREeCWcbKUk5fWYg" rule="STCAL_STATIC_CALENDAR_INSTANCE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBxQRdREeCWcbKUk5fWYg" description="Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multihtreaded use. &#xA;Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the&#xA;application. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see&#xA;random ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().&#xA;You may also experience serialization problems.&#xA;Using an instance field is recommended.&#xA;For more information on this see Sun Bug #6231579&#xA;and Sun Bug #6178997." implements="_paBxPxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxQhdREeCWcbKUk5fWYg" rule="STCAL_STATIC_CALENDAR_INSTANCE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBxRxdREeCWcbKUk5fWYg" description="The code creates an SQL prepared statement from a nonconstant String.&#xA;If unchecked, tainted data from a user is used in building this String, SQL injection could&#xA;be used to make the prepared statement do something unexpected and undesirable." name="SQL: A prepared statement is generated from a nonconstant String">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxSBdREeCWcbKUk5fWYg" rule="SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBxSRdREeCWcbKUk5fWYg" description="The code creates an SQL prepared statement from a nonconstant String.&#xA;If unchecked, tainted data from a user is used in building this String, SQL injection could&#xA;be used to make the prepared statement do something unexpected and undesirable." implements="_paBxRxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxShdREeCWcbKUk5fWYg" rule="SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBxTxdREeCWcbKUk5fWYg" description="This class defines a field with the same name as a visible&#xA;instance field in a superclass.  This is confusing, and&#xA;may indicate an error if methods update or access one of&#xA;the fields when they wanted the other." name="MF: Class defines field that masks a superclass field">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxUBdREeCWcbKUk5fWYg" rule="MF_CLASS_MASKS_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBxURdREeCWcbKUk5fWYg" description="This class defines a field with the same name as a visible&#xA;instance field in a superclass.  This is confusing, and&#xA;may indicate an error if methods update or access one of&#xA;the fields when they wanted the other." implements="_paBxTxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxUhdREeCWcbKUk5fWYg" rule="MF_CLASS_MASKS_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBxVxdREeCWcbKUk5fWYg" description="This method contains a redundant check of a known non-null value against&#xA;the constant null." name="RCN: Redundant nullcheck of value known to be non-null">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxWBdREeCWcbKUk5fWYg" rule="RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBxWRdREeCWcbKUk5fWYg" description="This method contains a redundant check of a known non-null value against&#xA;the constant null." implements="_paBxVxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxWhdREeCWcbKUk5fWYg" rule="RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBxWxdREeCWcbKUk5fWYg" description="Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multihtreaded use. &#xA;The detector has found a call to an instance of Calendar that has been obtained via a static&#xA;field. This looks suspicous.&#xA;For more information on this see Sun Bug #6231579&#xA;and Sun Bug #6178997." name="STCAL: Call to static Calendar">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxXBdREeCWcbKUk5fWYg" rule="STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBxXRdREeCWcbKUk5fWYg" description="Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multihtreaded use. &#xA;The detector has found a call to an instance of Calendar that has been obtained via a static&#xA;field. This looks suspicous.&#xA;For more information on this see Sun Bug #6231579&#xA;and Sun Bug #6178997." implements="_paBxWxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxXhdREeCWcbKUk5fWYg" rule="STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paBxYxdREeCWcbKUk5fWYg" description="This method contains a redundant comparison of two references known to&#xA;both be definitely null." name="RCN: Redundant comparison of two null values">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxZBdREeCWcbKUk5fWYg" rule="RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paBxZRdREeCWcbKUk5fWYg" description="This method contains a redundant comparison of two references known to&#xA;both be definitely null." implements="_paBxYxdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paBxZhdREeCWcbKUk5fWYg" rule="RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCX8RdREeCWcbKUk5fWYg" description="A parameter to this method has been identified as a value that should&#xA;&#x9;always be checked to see whether or not it is null, but it is being dereferenced&#xA;&#x9;without a preceding null check." name="NP: Method does not check for null argument">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCX8hdREeCWcbKUk5fWYg" rule="NP_ARGUMENT_MIGHT_BE_NULL"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCX8xdREeCWcbKUk5fWYg" description="A parameter to this method has been identified as a value that should&#xA;&#x9;always be checked to see whether or not it is null, but it is being dereferenced&#xA;&#x9;without a preceding null check." implements="_paCX8RdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCX9BdREeCWcbKUk5fWYg" rule="NP_ARGUMENT_MIGHT_BE_NULL"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCX9RdREeCWcbKUk5fWYg" description="This instanceof test will always return false, since the value being checked is guaranteed to be null.&#xA;Although this is safe, make sure it isn't&#xA;an indication of some misunderstanding or some other logic error." name="NP: A known null value is checked to see if it is an instance of a type">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCX9hdREeCWcbKUk5fWYg" rule="NP_NULL_INSTANCEOF"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCX9xdREeCWcbKUk5fWYg" description="This instanceof test will always return false, since the value being checked is guaranteed to be null.&#xA;Although this is safe, make sure it isn't&#xA;an indication of some misunderstanding or some other logic error." implements="_paCX9RdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCX-BdREeCWcbKUk5fWYg" rule="NP_NULL_INSTANCEOF"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCX-RdREeCWcbKUk5fWYg" description="Calling this.getClass().getResource(...) could give&#xA;results other than expected if this class is extended by a class in&#xA;another package." name="UI: Usage of GetResource may be unsafe if class is extended">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCX-hdREeCWcbKUk5fWYg" rule="UI_INHERITANCE_UNSAFE_GETRESOURCE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCX-xdREeCWcbKUk5fWYg" description="Calling this.getClass().getResource(...) could give&#xA;results other than expected if this class is extended by a class in&#xA;another package." implements="_paCX-RdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCX_BdREeCWcbKUk5fWYg" rule="UI_INHERITANCE_UNSAFE_GETRESOURCE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYBRdREeCWcbKUk5fWYg" description="This code passes a primitive array to a function that takes a variable number of object arguments.&#xA;This creates an array of length one to hold the primitive array and passes it to the function." name="VA: Primitive array passed to function expecting a variable number of object arguments">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYBhdREeCWcbKUk5fWYg" rule="VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCYBxdREeCWcbKUk5fWYg" description="This code passes a primitive array to a function that takes a variable number of object arguments.&#xA;This creates an array of length one to hold the primitive array and passes it to the function." implements="_paCYBRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYCBdREeCWcbKUk5fWYg" rule="VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYDRdREeCWcbKUk5fWYg" description="A value that is annotated as possibility being an instance of&#xA;&#x9;the values denoted by the type qualifier, and the value is guaranteed to be used&#xA;&#x9;in a way that prohibits values denoted by that type qualifier." name="TQ: Value that might carry a type qualifier is always used in a way prohibits it from having that type qualifier">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYDhdREeCWcbKUk5fWYg" rule="TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCYDxdREeCWcbKUk5fWYg" description="A value that is annotated as possibility being an instance of&#xA;&#x9;the values denoted by the type qualifier, and the value is guaranteed to be used&#xA;&#x9;in a way that prohibits values denoted by that type qualifier." implements="_paCYDRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYEBdREeCWcbKUk5fWYg" rule="TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYERdREeCWcbKUk5fWYg" description="The class's static initializer creates an instance of the class&#xA;before all of the static final fields are assigned." name="SI: Static initializer creates instance before all static final fields assigned">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYEhdREeCWcbKUk5fWYg" rule="SI_INSTANCE_BEFORE_FINALS_ASSIGNED"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCYExdREeCWcbKUk5fWYg" description="The class's static initializer creates an instance of the class&#xA;before all of the static final fields are assigned." implements="_paCYERdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYFBdREeCWcbKUk5fWYg" rule="SI_INSTANCE_BEFORE_FINALS_ASSIGNED"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYLRdREeCWcbKUk5fWYg" description="This method performs a nonsensical computation of a local variable with another&#xA;reference to the same variable (e.g., x&amp;x or x-x). Because of the nature&#xA;of the computation, this operation doesn't seem to make sense,&#xA;and may indicate a typo or&#xA;a logic error.  Double check the computation." name="SA: Nonsensical self computation involving a variable (e.g., x &amp; x)">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYLhdREeCWcbKUk5fWYg" rule="SA_LOCAL_SELF_COMPUTATION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCYLxdREeCWcbKUk5fWYg" description="This method performs a nonsensical computation of a local variable with another&#xA;reference to the same variable (e.g., x&amp;x or x-x). Because of the nature&#xA;of the computation, this operation doesn't seem to make sense,&#xA;and may indicate a typo or&#xA;a logic error.  Double check the computation." implements="_paCYLRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYMBdREeCWcbKUk5fWYg" rule="SA_LOCAL_SELF_COMPUTATION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYMRdREeCWcbKUk5fWYg" description="This class has a simple name that is identical to that of its superclass, except&#xA;that its superclass is in a different package (e.g., alpha.Foo extends beta.Foo). &#xA;This can be exceptionally confusing, create lots of situations in which you have to look at import statements&#xA;to resolve references and creates many&#xA;opportunities to accidently define methods that do not override methods in their superclasses." name="Nm: Class names shouldn't shadow simple name of superclass">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYMhdREeCWcbKUk5fWYg" rule="NM_SAME_SIMPLE_NAME_AS_SUPERCLASS"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCYMxdREeCWcbKUk5fWYg" description="This class has a simple name that is identical to that of its superclass, except&#xA;that its superclass is in a different package (e.g., alpha.Foo extends beta.Foo). &#xA;This can be exceptionally confusing, create lots of situations in which you have to look at import statements&#xA;to resolve references and creates many&#xA;opportunities to accidently define methods that do not override methods in their superclasses." implements="_paCYMRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYNBdREeCWcbKUk5fWYg" rule="NM_SAME_SIMPLE_NAME_AS_SUPERCLASS"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYORdREeCWcbKUk5fWYg" description="This code computes a hashCode, and then computes&#xA;the remainder of that value modulo another value. Since the hashCode&#xA;can be negative, the result of the remainder operation&#xA;can also be negative. &#xA; Assuming you want to ensure that the result of your computation is nonnegative,&#xA;you may need to change your code.&#xA;If you know the divisor is a power of 2,&#xA;you can use a bitwise and operator instead (i.e., instead of&#xA;using x.hashCode()%n, use x.hashCode()&amp;amp;(n-1). &#xA;This is probably faster than computing the remainder as well.&#xA;If you don't know that the divisor is a power of 2, take the absolute&#xA;value of the result of the remainder operation (i.e., use&#xA;Math.abs(x.hashCode()%n)" name="RV: Remainder of hashCode could be negative">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYOhdREeCWcbKUk5fWYg" rule="RV_REM_OF_HASHCODE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCYOxdREeCWcbKUk5fWYg" description="This code computes a hashCode, and then computes&#xA;the remainder of that value modulo another value. Since the hashCode&#xA;can be negative, the result of the remainder operation&#xA;can also be negative. &#xA; Assuming you want to ensure that the result of your computation is nonnegative,&#xA;you may need to change your code.&#xA;If you know the divisor is a power of 2,&#xA;you can use a bitwise and operator instead (i.e., instead of&#xA;using x.hashCode()%n, use x.hashCode()&amp;amp;(n-1). &#xA;This is probably faster than computing the remainder as well.&#xA;If you don't know that the divisor is a power of 2, take the absolute&#xA;value of the result of the remainder operation (i.e., use&#xA;Math.abs(x.hashCode()%n)" implements="_paCYORdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYPBdREeCWcbKUk5fWYg" rule="RV_REM_OF_HASHCODE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYQRdREeCWcbKUk5fWYg" description="This method returns a value that is not checked. The return value should be checked&#xA;since it can indicate an unusual or unexpected function execution. For&#xA;example, the File.delete() method returns false&#xA;if the file could not be successfully deleted (rather than &#xA;throwing an Exception).&#xA;If you don't check the result, you won't notice if the method invocation&#xA;signals unexpected behavior by returning an atypical return value." name="RV: Method ignores exceptional return value">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYQhdREeCWcbKUk5fWYg" rule="RV_RETURN_VALUE_IGNORED_BAD_PRACTICE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCYQxdREeCWcbKUk5fWYg" description="This method returns a value that is not checked. The return value should be checked&#xA;since it can indicate an unusual or unexpected function execution. For&#xA;example, the File.delete() method returns false&#xA;if the file could not be successfully deleted (rather than &#xA;throwing an Exception).&#xA;If you don't check the result, you won't notice if the method invocation&#xA;signals unexpected behavior by returning an atypical return value." implements="_paCYQRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYRBdREeCWcbKUk5fWYg" rule="RV_RETURN_VALUE_IGNORED_BAD_PRACTICE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYTRdREeCWcbKUk5fWYg" description="This method is invoked in the constructor of of the superclass. At this point,&#xA;&#x9;the fields of the class have not yet initialized.&#xA;To make this more concrete, consider the following classes:&#xA;abstract class A {&#xA;  int hashCode;&#xA;  abstract Object getValue();&#xA;  A() {&#xA;    hashCode = getValue().hashCode();&#xA;    }&#xA;  }&#xA;class B extends A {&#xA;  Object value;&#xA;  B(Object v) {&#xA;    this.value = v;&#xA;    }&#xA;  Object getValue() {&#xA;    return value;&#xA;  }&#xA;  }&#xA;When a B is constructed,&#xA;the constructor for the A class is invoked&#xA;before the constructor for B sets value.&#xA;Thus, when the constructor for A invokes getValue,&#xA;an uninitialized value is read for value" name="UR: Uninitialized read of field method called from constructor of superclass">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYThdREeCWcbKUk5fWYg" rule="UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCYTxdREeCWcbKUk5fWYg" description="This method is invoked in the constructor of of the superclass. At this point,&#xA;&#x9;the fields of the class have not yet initialized.&#xA;To make this more concrete, consider the following classes:&#xA;abstract class A {&#xA;  int hashCode;&#xA;  abstract Object getValue();&#xA;  A() {&#xA;    hashCode = getValue().hashCode();&#xA;    }&#xA;  }&#xA;class B extends A {&#xA;  Object value;&#xA;  B(Object v) {&#xA;    this.value = v;&#xA;    }&#xA;  Object getValue() {&#xA;    return value;&#xA;  }&#xA;  }&#xA;When a B is constructed,&#xA;the constructor for the A class is invoked&#xA;before the constructor for B sets value.&#xA;Thus, when the constructor for A invokes getValue,&#xA;an uninitialized value is read for value" implements="_paCYTRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYUBdREeCWcbKUk5fWYg" rule="UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYURdREeCWcbKUk5fWYg" description="This method compares a field with itself, and may indicate a typo or&#xA;a logic error.  Make sure that you are comparing the right things." name="SA: Self comparison of field with itself">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYUhdREeCWcbKUk5fWYg" rule="SA_FIELD_SELF_COMPARISON"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCYUxdREeCWcbKUk5fWYg" description="This method compares a field with itself, and may indicate a typo or&#xA;a logic error.  Make sure that you are comparing the right things." implements="_paCYURdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYVBdREeCWcbKUk5fWYg" rule="SA_FIELD_SELF_COMPARISON"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYVRdREeCWcbKUk5fWYg" description="This Serializable class defines a non-primitive instance field which is neither transient,&#xA;Serializable, or java.lang.Object, and does not appear to implement&#xA;the Externalizable interface or the&#xA;readObject() and writeObject() methods.&amp;nbsp;&#xA;Objects of this class will not be deserialized correctly if a non-Serializable&#xA;object is stored in this field." name="Se: Non-transient non-serializable instance field in serializable class">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYVhdREeCWcbKUk5fWYg" rule="SE_BAD_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCYVxdREeCWcbKUk5fWYg" description="This Serializable class defines a non-primitive instance field which is neither transient,&#xA;Serializable, or java.lang.Object, and does not appear to implement&#xA;the Externalizable interface or the&#xA;readObject() and writeObject() methods.&amp;nbsp;&#xA;Objects of this class will not be deserialized correctly if a non-Serializable&#xA;object is stored in this field." implements="_paCYVRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYWBdREeCWcbKUk5fWYg" rule="SE_BAD_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYWRdREeCWcbKUk5fWYg" description="This private method is never called. Although it is&#xA;possible that the method will be invoked through reflection,&#xA;it is more likely that the method is never used, and should be&#xA;removed." name="UPM: Private method is never called">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYWhdREeCWcbKUk5fWYg" rule="UPM_UNCALLED_PRIVATE_METHOD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCYWxdREeCWcbKUk5fWYg" description="This private method is never called. Although it is&#xA;possible that the method will be invoked through reflection,&#xA;it is more likely that the method is never used, and should be&#xA;removed." implements="_paCYWRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYXBdREeCWcbKUk5fWYg" rule="UPM_UNCALLED_PRIVATE_METHOD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYZRdREeCWcbKUk5fWYg" description="The program is dereferencing a field that does not seem to ever have a non-null value written to it.&#xA;Dereferencing this value will generate a null pointer exception." name="NP: Read of unwritten field">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYZhdREeCWcbKUk5fWYg" rule="NP_UNWRITTEN_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCYZxdREeCWcbKUk5fWYg" description="The program is dereferencing a field that does not seem to ever have a non-null value written to it.&#xA;Dereferencing this value will generate a null pointer exception." implements="_paCYZRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYaBdREeCWcbKUk5fWYg" rule="NP_UNWRITTEN_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYaRdREeCWcbKUk5fWYg" description="This method calls notify() rather than notifyAll().&amp;nbsp;&#xA;  Java monitors are often used for multiple conditions.&amp;nbsp; Calling notify()&#xA;  only wakes up one thread, meaning that the thread woken up might not be the&#xA;  one waiting for the condition that the caller just satisfied." name="No: Using notify() rather than notifyAll()">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYahdREeCWcbKUk5fWYg" rule="NO_NOTIFY_NOT_NOTIFYALL"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCYaxdREeCWcbKUk5fWYg" description="This method calls notify() rather than notifyAll().&amp;nbsp;&#xA;  Java monitors are often used for multiple conditions.&amp;nbsp; Calling notify()&#xA;  only wakes up one thread, meaning that the thread woken up might not be the&#xA;  one waiting for the condition that the caller just satisfied." implements="_paCYaRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYbBdREeCWcbKUk5fWYg" rule="NO_NOTIFY_NOT_NOTIFYALL"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYdRdREeCWcbKUk5fWYg" description="This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting&#xA;vulnerability. See http://en.wikipedia.org/wiki/Cross-site_scripting&#xA;for more information.&#xA;FindBugs looks only for the most blatant, obvious cases of cross site scripting.&#xA;If FindBugs found any, you almost certainly have more cross site scripting&#xA;vulnerabilities that FindBugs doesn't report. If you are concerned about cross site scripting, you should seriously &#xA;consider using a commercial static analysis or pen-testing tool." name="XSS: Servlet reflected cross site scripting vulnerability">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYdhdREeCWcbKUk5fWYg" rule="XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCYdxdREeCWcbKUk5fWYg" description="This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting&#xA;vulnerability. See http://en.wikipedia.org/wiki/Cross-site_scripting&#xA;for more information.&#xA;FindBugs looks only for the most blatant, obvious cases of cross site scripting.&#xA;If FindBugs found any, you almost certainly have more cross site scripting&#xA;vulnerabilities that FindBugs doesn't report. If you are concerned about cross site scripting, you should seriously &#xA;consider using a commercial static analysis or pen-testing tool." implements="_paCYdRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYeBdREeCWcbKUk5fWYg" rule="XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYeRdREeCWcbKUk5fWYg" description="A reference value which is null on some exception control path is&#xA;dereferenced here.&amp;nbsp; This may lead to a NullPointerException&#xA;when the code is executed.&amp;nbsp;&#xA;Note that because FindBugs currently does not prune infeasible exception paths,&#xA;this may be a false warning.&#xA;&#xA; Also note that FindBugs considers the default case of a switch statement to&#xA;be an exception path, since the default case is often infeasible." name="NP: Possible null pointer dereference in method on exception path">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYehdREeCWcbKUk5fWYg" rule="NP_NULL_ON_SOME_PATH_EXCEPTION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paCYexdREeCWcbKUk5fWYg" description="A reference value which is null on some exception control path is&#xA;dereferenced here.&amp;nbsp; This may lead to a NullPointerException&#xA;when the code is executed.&amp;nbsp;&#xA;Note that because FindBugs currently does not prune infeasible exception paths,&#xA;this may be a false warning.&#xA;&#xA; Also note that FindBugs considers the default case of a switch statement to&#xA;be an exception path, since the default case is often infeasible." implements="_paCYeRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYfBdREeCWcbKUk5fWYg" rule="NP_NULL_ON_SOME_PATH_EXCEPTION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paCYfRdREeCWcbKUk5fWYg" description="This class defines a method called tostring().&amp;nbsp; This method&#xA;  does not override the toString() method in java.lang.Object,&#xA;  which is probably what was intended." name="Nm: Class defines tostring(); should it be toString()?">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paCYfhdREeCWcbKUk5fWYg" rule="NM_LCASE_TOSTRING"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_ABdREeCWcbKUk5fWYg" description="This class defines a method called tostring().&amp;nbsp; This method&#xA;  does not override the toString() method in java.lang.Object,&#xA;  which is probably what was intended." implements="_paCYfRdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_ARdREeCWcbKUk5fWYg" rule="NM_LCASE_TOSTRING"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paC_ChdREeCWcbKUk5fWYg" description="The method seems to be building a String using concatenation in a loop.&#xA;In each iteration, the String is converted to a StringBuffer/StringBuilder,&#xA;   appended to, and converted back to a String.&#xA;   This can lead to a cost quadratic in the number of iterations,&#xA;   as the growing string is recopied in each iteration. &#xA;&#xA;Better performance can be obtained by using&#xA;a StringBuffer (or StringBuilder in Java 1.5) explicitly.&#xA;&#xA; For example:&#xA;&#xA;  // This is bad&#xA;  String s = &quot;&quot;;&#xA;  for (int i = 0; i &amp;lt; field.length; ++i) {&#xA;    s = s + field[i];&#xA;  }&#xA;&#xA;  // This is better&#xA;  StringBuffer buf = new StringBuffer();&#xA;  for (int i = 0; i &amp;lt; field.length; ++i) {&#xA;    buf.append(field[i]);&#xA;  }&#xA;  String s = buf.toString();" name="SBSC: Method concatenates strings using + in a loop">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_CxdREeCWcbKUk5fWYg" rule="SBSC_USE_STRINGBUFFER_CONCATENATION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_DBdREeCWcbKUk5fWYg" description="The method seems to be building a String using concatenation in a loop.&#xA;In each iteration, the String is converted to a StringBuffer/StringBuilder,&#xA;   appended to, and converted back to a String.&#xA;   This can lead to a cost quadratic in the number of iterations,&#xA;   as the growing string is recopied in each iteration. &#xA;&#xA;Better performance can be obtained by using&#xA;a StringBuffer (or StringBuilder in Java 1.5) explicitly.&#xA;&#xA; For example:&#xA;&#xA;  // This is bad&#xA;  String s = &quot;&quot;;&#xA;  for (int i = 0; i &amp;lt; field.length; ++i) {&#xA;    s = s + field[i];&#xA;  }&#xA;&#xA;  // This is better&#xA;  StringBuffer buf = new StringBuffer();&#xA;  for (int i = 0; i &amp;lt; field.length; ++i) {&#xA;    buf.append(field[i]);&#xA;  }&#xA;  String s = buf.toString();" implements="_paC_ChdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_DRdREeCWcbKUk5fWYg" rule="SBSC_USE_STRINGBUFFER_CONCATENATION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paC_DhdREeCWcbKUk5fWYg" description="This method contains a call to java.lang.Object.wait() which&#xA;  is not guarded by conditional control flow.&amp;nbsp; The code should&#xA;&#x9;verify that condition it intends to wait for is not already satisfied&#xA;&#x9;before calling wait; any previous notifications will be ignored." name="UW: Unconditional wait">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_DxdREeCWcbKUk5fWYg" rule="UW_UNCOND_WAIT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_EBdREeCWcbKUk5fWYg" description="This method contains a call to java.lang.Object.wait() which&#xA;  is not guarded by conditional control flow.&amp;nbsp; The code should&#xA;&#x9;verify that condition it intends to wait for is not already satisfied&#xA;&#x9;before calling wait; any previous notifications will be ignored." implements="_paC_DhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_ERdREeCWcbKUk5fWYg" rule="UW_UNCOND_WAIT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paC_GhdREeCWcbKUk5fWYg" description="A mutable static field could be changed by malicious code or&#xA;        by accident from another package.&#xA;        The field could be made package protected and/or made final&#xA;   to avoid&#xA;        this vulnerability." name="MS: Field should be both final and package protected">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_GxdREeCWcbKUk5fWYg" rule="MS_FINAL_PKGPROTECT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_HBdREeCWcbKUk5fWYg" description="A mutable static field could be changed by malicious code or&#xA;        by accident from another package.&#xA;        The field could be made package protected and/or made final&#xA;   to avoid&#xA;        this vulnerability." implements="_paC_GhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_HRdREeCWcbKUk5fWYg" rule="MS_FINAL_PKGPROTECT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paC_HhdREeCWcbKUk5fWYg" description="A possibly-null value is passed at a call site where all known&#xA;      target methods require the parameter to be nonnull.&#xA;&#x9;Either the parameter is annotated as a parameter that should&#xA;&#x9;always be nonnull, or analysis has shown that it will always be &#xA;&#x9;dereferenced." name="NP: Method call passes null for nonnull parameter">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_HxdREeCWcbKUk5fWYg" rule="NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_IBdREeCWcbKUk5fWYg" description="A possibly-null value is passed at a call site where all known&#xA;      target methods require the parameter to be nonnull.&#xA;&#x9;Either the parameter is annotated as a parameter that should&#xA;&#x9;always be nonnull, or analysis has shown that it will always be &#xA;&#x9;dereferenced." implements="_paC_HhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_IRdREeCWcbKUk5fWYg" rule="NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paC_KhdREeCWcbKUk5fWYg" description="This class defines a method called hashcode().&amp;nbsp; This method&#xA;  does not override the hashCode() method in java.lang.Object,&#xA;  which is probably what was intended." name="Nm: Class defines hashcode(); should it be hashCode()?">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_KxdREeCWcbKUk5fWYg" rule="NM_LCASE_HASHCODE"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_LBdREeCWcbKUk5fWYg" description="This class defines a method called hashcode().&amp;nbsp; This method&#xA;  does not override the hashCode() method in java.lang.Object,&#xA;  which is probably what was intended." implements="_paC_KhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_LRdREeCWcbKUk5fWYg" rule="NM_LCASE_HASHCODE"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paC_NhdREeCWcbKUk5fWYg" description="This method acquires a JSR-166 (java.util.concurrent) lock,&#xA;but does not release it on all exception paths out of the method.  In general, the correct idiom&#xA;for using a JSR-166 lock is:&#xA;&#xA;&#xA;    Lock l = ...;&#xA;    l.lock();&#xA;    try {&#xA;        // do something&#xA;    } finally {&#xA;        l.unlock();&#xA;    }" name="UL: Method does not release lock on all exception paths">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_NxdREeCWcbKUk5fWYg" rule="UL_UNRELEASED_LOCK_EXCEPTION_PATH"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_OBdREeCWcbKUk5fWYg" description="This method acquires a JSR-166 (java.util.concurrent) lock,&#xA;but does not release it on all exception paths out of the method.  In general, the correct idiom&#xA;for using a JSR-166 lock is:&#xA;&#xA;&#xA;    Lock l = ...;&#xA;    l.lock();&#xA;    try {&#xA;        // do something&#xA;    } finally {&#xA;        l.unlock();&#xA;    }" implements="_paC_NhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_ORdREeCWcbKUk5fWYg" rule="UL_UNRELEASED_LOCK_EXCEPTION_PATH"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paC_RhdREeCWcbKUk5fWYg" description="The referenced methods have names that differ only by capitalization." name="Nm: Confusing method names">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_RxdREeCWcbKUk5fWYg" rule="NM_CONFUSING"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_SBdREeCWcbKUk5fWYg" description="The referenced methods have names that differ only by capitalization." implements="_paC_RhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_SRdREeCWcbKUk5fWYg" rule="NM_CONFUSING"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paC_ShdREeCWcbKUk5fWYg" description="This class is not derived from another exception, but ends with 'Exception'. This will&#xA;be confusing to users of this class." name="Nm: Class is not derived from an Exception, even though it is named as such">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_SxdREeCWcbKUk5fWYg" rule="NM_CLASS_NOT_EXCEPTION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_TBdREeCWcbKUk5fWYg" description="This class is not derived from another exception, but ends with 'Exception'. This will&#xA;be confusing to users of this class." implements="_paC_ShdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_TRdREeCWcbKUk5fWYg" rule="NM_CLASS_NOT_EXCEPTION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paC_VhdREeCWcbKUk5fWYg" description="This field is never initialized within any constructor, and is therefore could be null after&#xA;the object is constructed.&#xA;This could be a either an error or a questionable design, since&#xA;it means a null pointer exception will be generated if that field is dereferenced&#xA;before being initialized." name="UwF: Field not initialized in constructor">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_VxdREeCWcbKUk5fWYg" rule="UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_WBdREeCWcbKUk5fWYg" description="This field is never initialized within any constructor, and is therefore could be null after&#xA;the object is constructed.&#xA;This could be a either an error or a questionable design, since&#xA;it means a null pointer exception will be generated if that field is dereferenced&#xA;before being initialized." implements="_paC_VhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_WRdREeCWcbKUk5fWYg" rule="UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paC_YhdREeCWcbKUk5fWYg" description="This constructor reads a field which has not yet been assigned a value.&amp;nbsp;&#xA;  This is often caused when the programmer mistakenly uses the field instead&#xA;  of one of the constructor's parameters." name="UR: Uninitialized read of field in constructor">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_YxdREeCWcbKUk5fWYg" rule="UR_UNINIT_READ"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_ZBdREeCWcbKUk5fWYg" description="This constructor reads a field which has not yet been assigned a value.&amp;nbsp;&#xA;  This is often caused when the programmer mistakenly uses the field instead&#xA;  of one of the constructor's parameters." implements="_paC_YhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_ZRdREeCWcbKUk5fWYg" rule="UR_UNINIT_READ"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paC_ehdREeCWcbKUk5fWYg" description="This method contains a call to java.util.concurrent.await()&#xA;   (or variants)&#xA;  which is not in a loop.&amp;nbsp; If the object is used for multiple conditions,&#xA;  the condition the caller intended to wait for might not be the one&#xA;  that actually occurred." name="Wa: Condition.await() not in loop">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_exdREeCWcbKUk5fWYg" rule="WA_AWAIT_NOT_IN_LOOP"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_fBdREeCWcbKUk5fWYg" description="This method contains a call to java.util.concurrent.await()&#xA;   (or variants)&#xA;  which is not in a loop.&amp;nbsp; If the object is used for multiple conditions,&#xA;  the condition the caller intended to wait for might not be the one&#xA;  that actually occurred." implements="_paC_ehdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_fRdREeCWcbKUk5fWYg" rule="WA_AWAIT_NOT_IN_LOOP"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paC_fhdREeCWcbKUk5fWYg" description="The method creates a database resource (such as a database connection&#xA;or row set), does not assign it to any&#xA;fields, pass it to other methods, or return it, and does not appear to close&#xA;the object on all exception paths out of the method.&amp;nbsp; Failure to&#xA;close database resources on all paths out of a method may&#xA;result in poor performance, and could cause the application to&#xA;have problems communicating with the database." name="ODR: Method may fail to close database resource on exception">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_fxdREeCWcbKUk5fWYg" rule="ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_gBdREeCWcbKUk5fWYg" description="The method creates a database resource (such as a database connection&#xA;or row set), does not assign it to any&#xA;fields, pass it to other methods, or return it, and does not appear to close&#xA;the object on all exception paths out of the method.&amp;nbsp; Failure to&#xA;close database resources on all paths out of a method may&#xA;result in poor performance, and could cause the application to&#xA;have problems communicating with the database." implements="_paC_fhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_gRdREeCWcbKUk5fWYg" rule="ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paC_hhdREeCWcbKUk5fWYg" description="This class defines a serialVersionUID field that is not long.&amp;nbsp;&#xA;  The field should be made long&#xA;   if it is intended to specify&#xA;   the version UID for purposes of serialization." name="Se: serialVersionUID isn't long">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_hxdREeCWcbKUk5fWYg" rule="SE_NONLONG_SERIALVERSIONID"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_iBdREeCWcbKUk5fWYg" description="This class defines a serialVersionUID field that is not long.&amp;nbsp;&#xA;  The field should be made long&#xA;   if it is intended to specify&#xA;   the version UID for purposes of serialization." implements="_paC_hhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_iRdREeCWcbKUk5fWYg" rule="SE_NONLONG_SERIALVERSIONID"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paC_ihdREeCWcbKUk5fWYg" description="This field is never read.&amp;nbsp; Consider removing it from the class." name="UrF: Unread field">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_ixdREeCWcbKUk5fWYg" rule="URF_UNREAD_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_jBdREeCWcbKUk5fWYg" description="This field is never read.&amp;nbsp; Consider removing it from the class." implements="_paC_ihdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_jRdREeCWcbKUk5fWYg" rule="URF_UNREAD_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paC_jhdREeCWcbKUk5fWYg" description="This declares a volatile reference to an array, which might not be what&#xA;you want. With a volatile reference to an array, reads and writes of&#xA;the reference to the array are treated as volatile, but the array elements&#xA;are non-volatile. To get volatile array elements, you will need to use&#xA;one of the atomic array classes in java.util.concurrent (provided&#xA;in Java 5.0)." name="VO: A volatile reference to an array doesn't treat the array elements as volatile">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_jxdREeCWcbKUk5fWYg" rule="VO_VOLATILE_REFERENCE_TO_ARRAY"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paC_kBdREeCWcbKUk5fWYg" description="This declares a volatile reference to an array, which might not be what&#xA;you want. With a volatile reference to an array, reads and writes of&#xA;the reference to the array are treated as volatile, but the array elements&#xA;are non-volatile. To get volatile array elements, you will need to use&#xA;one of the atomic array classes in java.util.concurrent (provided&#xA;in Java 5.0)." implements="_paC_jhdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paC_kRdREeCWcbKUk5fWYg" rule="VO_VOLATILE_REFERENCE_TO_ARRAY"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paDmGBdREeCWcbKUk5fWYg" description="This field is never used.&amp;nbsp; Consider removing it from the class." name="UuF: Unused field">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmGRdREeCWcbKUk5fWYg" rule="UUF_UNUSED_FIELD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paDmGhdREeCWcbKUk5fWYg" description="This field is never used.&amp;nbsp; Consider removing it from the class." implements="_paDmGBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmGxdREeCWcbKUk5fWYg" rule="UUF_UNUSED_FIELD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paDmJBdREeCWcbKUk5fWYg" description="This method contains a double assignment of a field; e.g.&#xA;&#xA;&#xA;  int x,y;&#xA;  public void foo() {&#xA;    x = x = 17;&#xA;  }&#xA;&#xA;Assigning to a field twice is useless, and may indicate a logic error or typo." name="SA: Double assignment of field">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmJRdREeCWcbKUk5fWYg" rule="SA_FIELD_DOUBLE_ASSIGNMENT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paDmJhdREeCWcbKUk5fWYg" description="This method contains a double assignment of a field; e.g.&#xA;&#xA;&#xA;  int x,y;&#xA;  public void foo() {&#xA;    x = x = 17;&#xA;  }&#xA;&#xA;Assigning to a field twice is useless, and may indicate a logic error or typo." implements="_paDmJBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmJxdREeCWcbKUk5fWYg" rule="SA_FIELD_DOUBLE_ASSIGNMENT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paDmMBdREeCWcbKUk5fWYg" description="The constructor starts a thread. This is likely to be wrong if&#xA;   the class is ever extended/subclassed, since the thread will be started&#xA;   before the subclass constructor is started." name="SC: Constructor invokes Thread.start()">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmMRdREeCWcbKUk5fWYg" rule="SC_START_IN_CTOR"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paDmMhdREeCWcbKUk5fWYg" description="The constructor starts a thread. This is likely to be wrong if&#xA;   the class is ever extended/subclassed, since the thread will be started&#xA;   before the subclass constructor is started." implements="_paDmMBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmMxdREeCWcbKUk5fWYg" rule="SC_START_IN_CTOR"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paDmNBdREeCWcbKUk5fWYg" description="A value specified as not carrying a type qualifier annotation is guaranteed&#xA;        to be consumed in a location or locations requiring that the value does&#xA;        carry that annotation.&#xA;        &#xA;        &#xA;        &#xA;        More precisely, a value annotated with a type qualifier specifying when=NEVER&#xA;        is guaranteed to reach a use or uses where the same type qualifier specifies when=ALWAYS.&#xA;        &#xA;&#xA;        &#xA;        TODO: example" name="TQ: Value annotated as never carrying a type qualifier used where value carrying that qualifier is required">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmNRdREeCWcbKUk5fWYg" rule="TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paDmNhdREeCWcbKUk5fWYg" description="A value specified as not carrying a type qualifier annotation is guaranteed&#xA;        to be consumed in a location or locations requiring that the value does&#xA;        carry that annotation.&#xA;        &#xA;        &#xA;        &#xA;        More precisely, a value annotated with a type qualifier specifying when=NEVER&#xA;        is guaranteed to reach a use or uses where the same type qualifier specifies when=ALWAYS.&#xA;        &#xA;&#xA;        &#xA;        TODO: example" implements="_paDmNBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmNxdREeCWcbKUk5fWYg" rule="TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paDmQBdREeCWcbKUk5fWYg" description="This anonymous class defined a method that is not directly invoked and does not override&#xA;a method in a superclass. Since methods in other classes cannot directly invoke methods&#xA;declared in an anonymous class, it seems that this method is uncallable. The method&#xA;might simply be dead code, but it is also possible that the method is intended to&#xA;override a method declared in a superclass, and due to an typo or other error the method does not,&#xA;in fact, override the method it is intended to." name="UMAC: Uncallable method defined in anonymous class">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmQRdREeCWcbKUk5fWYg" rule="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paDmQhdREeCWcbKUk5fWYg" description="This anonymous class defined a method that is not directly invoked and does not override&#xA;a method in a superclass. Since methods in other classes cannot directly invoke methods&#xA;declared in an anonymous class, it seems that this method is uncallable. The method&#xA;might simply be dead code, but it is also possible that the method is intended to&#xA;override a method declared in a superclass, and due to an typo or other error the method does not,&#xA;in fact, override the method it is intended to." implements="_paDmQBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmQxdREeCWcbKUk5fWYg" rule="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paDmRBdREeCWcbKUk5fWYg" description="This method allocates a specific implementation of an xml interface. It is preferable to use&#xA;      the supplied factory classes to create these objects so that the implementation can be&#xA;      changed at runtime. See&#xA;      &#xA;      &#xA;         javax.xml.parsers.DocumentBuilderFactory&#xA;         javax.xml.parsers.SAXParserFactory&#xA;         javax.xml.transform.TransformerFactory&#xA;         org.w3c.dom.Document.createXXXX&#xA;      &#xA;      for details." name="XFB: Method directly allocates a specific implementation of xml interfaces">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmRRdREeCWcbKUk5fWYg" rule="XFB_XML_FACTORY_BYPASS"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paDmRhdREeCWcbKUk5fWYg" description="This method allocates a specific implementation of an xml interface. It is preferable to use&#xA;      the supplied factory classes to create these objects so that the implementation can be&#xA;      changed at runtime. See&#xA;      &#xA;      &#xA;         javax.xml.parsers.DocumentBuilderFactory&#xA;         javax.xml.parsers.SAXParserFactory&#xA;         javax.xml.transform.TransformerFactory&#xA;         org.w3c.dom.Document.createXXXX&#xA;      &#xA;      for details." implements="_paDmRBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmRxdREeCWcbKUk5fWYg" rule="XFB_XML_FACTORY_BYPASS"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paDmTBdREeCWcbKUk5fWYg" description="This method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is&#xA;not the current thread. As the interrupted() method is static, the interrupted method will be called on a different&#xA;object than the one the author intended." name="STI: Static Thread.interrupted() method invoked on thread instance">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmTRdREeCWcbKUk5fWYg" rule="STI_INTERRUPTED_ON_UNKNOWNTHREAD"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paDmThdREeCWcbKUk5fWYg" description="This method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is&#xA;not the current thread. As the interrupted() method is static, the interrupted method will be called on a different&#xA;object than the one the author intended." implements="_paDmTBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmTxdREeCWcbKUk5fWYg" rule="STI_INTERRUPTED_ON_UNKNOWNTHREAD"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paDmUBdREeCWcbKUk5fWYg" description="Names of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized." name="Nm: Field names should start with a lower case letter">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmURdREeCWcbKUk5fWYg" rule="NM_FIELD_NAMING_CONVENTION"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paDmUhdREeCWcbKUk5fWYg" description="Names of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized." implements="_paDmUBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmUxdREeCWcbKUk5fWYg" rule="NM_FIELD_NAMING_CONVENTION"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paDmXBdREeCWcbKUk5fWYg" description="Waiting on a monitor while two locks are held may cause&#xA;  deadlock.&#xA;   &amp;nbsp;&#xA;   Performing a wait only releases the lock on the object&#xA;   being waited on, not any other locks.&#xA;   &amp;nbsp;&#xA;This not necessarily a bug, but is worth examining&#xA;  closely." name="TLW: Wait with two locks held">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmXRdREeCWcbKUk5fWYg" rule="TLW_TWO_LOCK_WAIT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paDmXhdREeCWcbKUk5fWYg" description="Waiting on a monitor while two locks are held may cause&#xA;  deadlock.&#xA;   &amp;nbsp;&#xA;   Performing a wait only releases the lock on the object&#xA;   being waited on, not any other locks.&#xA;   &amp;nbsp;&#xA;This not necessarily a bug, but is worth examining&#xA;  closely." implements="_paDmXBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmXxdREeCWcbKUk5fWYg" rule="TLW_TWO_LOCK_WAIT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paDmbBdREeCWcbKUk5fWYg" description="In order for the readResolve method to be recognized by the serialization&#xA;mechanism, it must be declared to have a return type of Object." name="Se: The readResolve method must be declared with a return type of Object.">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmbRdREeCWcbKUk5fWYg" rule="SE_READ_RESOLVE_MUST_RETURN_OBJECT"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paDmbhdREeCWcbKUk5fWYg" description="In order for the readResolve method to be recognized by the serialization&#xA;mechanism, it must be declared to have a return type of Object." implements="_paDmbBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmbxdREeCWcbKUk5fWYg" rule="SE_READ_RESOLVE_MUST_RETURN_OBJECT"/>
  </measures>
  <measures xsi:type="qm:Measure" xmi:id="_paDmdBdREeCWcbKUk5fWYg" description="There is a branch of statement that, if executed,  guarantees that&#xA;a null value will be dereferenced, which&#xA;would generate a NullPointerException when the code is executed.&#xA;Of course, the problem might be that the branch or statement is infeasible and that&#xA;the null pointer exception can't ever be executed; deciding that is beyond the ability of FindBugs." name="NP: Possible null pointer dereference">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmdRdREeCWcbKUk5fWYg" rule="NP_NULL_ON_SOME_PATH"/>
  </measures>
  <measures xsi:type="qm:ImplementingMeasure" xmi:id="_paDmdhdREeCWcbKUk5fWYg" description="There is a branch of statement that, if executed,  guarantees that&#xA;a null value will be dereferenced, which&#xA;would generate a NullPointerException when the code is executed.&#xA;Of course, the problem might be that the branch or statement is infeasible and that&#xA;the null pointer exception can't ever be executed; deciding that is beyond the ability of FindBugs." implements="_paDmdBdREeCWcbKUk5fWYg">
    <determinedBy xsi:type="qm:RuleBasedInstrument" xmi:id="_paDmdxdREeCWcbKUk5fWYg" rule="NP_NULL_ON_SOME_PATH"/>
  </measures>
</qm:QualityModel>
