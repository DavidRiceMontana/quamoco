/*-------------------------------------------------------------------------+
|                                                                          |
| Copyright 2012 Technische Universitaet Muenchen and                      |
| Fraunhofer-Institut fuer Experimentelles Software Engineering (IESE)     |
|                                                                          |
| Licensed under the Apache License, Version 2.0 (the "License");          |
| you may not use this file except in compliance with the License.         |
| You may obtain a copy of the License at                                  |
|                                                                          |
|    http://www.apache.org/licenses/LICENSE-2.0                            |
|                                                                          |
| Unless required by applicable law or agreed to in writing, software      |
| distributed under the License is distributed on an "AS IS" BASIS,        |
| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
| See the License for the specific language governing permissions and      |
| limitations under the License.                                           |
|                                                                          |
+-------------------------------------------------------------------------*/

/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.quamoco.adaptation.model.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import de.quamoco.adaptation.model.util.AdaptationModelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AdaptationModelItemProviderAdapterFactory extends AdaptationModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AdaptationModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.quamoco.adaptation.model.AdaptationModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdaptationModelItemProvider adaptationModelItemProvider;

	/**
	 * This creates an adapter for a {@link de.quamoco.adaptation.model.AdaptationModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdaptationModelAdapter() {
		if (adaptationModelItemProvider == null) {
			adaptationModelItemProvider = new AdaptationModelItemProvider(this);
		}

		return adaptationModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.quamoco.adaptation.model.Wizard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WizardItemProvider wizardItemProvider;

	/**
	 * This creates an adapter for a {@link de.quamoco.adaptation.model.Wizard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWizardAdapter() {
		if (wizardItemProvider == null) {
			wizardItemProvider = new WizardItemProvider(this);
		}

		return wizardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.quamoco.adaptation.model.AdaptationElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdaptationElementItemProvider adaptationElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.quamoco.adaptation.model.AdaptationElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdaptationElementAdapter() {
		if (adaptationElementItemProvider == null) {
			adaptationElementItemProvider = new AdaptationElementItemProvider(this);
		}

		return adaptationElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.quamoco.adaptation.model.PreselectionDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreselectionDescriptorItemProvider preselectionDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link de.quamoco.adaptation.model.PreselectionDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreselectionDescriptorAdapter() {
		if (preselectionDescriptorItemProvider == null) {
			preselectionDescriptorItemProvider = new PreselectionDescriptorItemProvider(this);
		}

		return preselectionDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.quamoco.adaptation.model.Purpose} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PurposeItemProvider purposeItemProvider;

	/**
	 * This creates an adapter for a {@link de.quamoco.adaptation.model.Purpose}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPurposeAdapter() {
		if (purposeItemProvider == null) {
			purposeItemProvider = new PurposeItemProvider(this);
		}

		return purposeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.quamoco.adaptation.model.ElementHierarchy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementHierarchyItemProvider elementHierarchyItemProvider;

	/**
	 * This creates an adapter for a {@link de.quamoco.adaptation.model.ElementHierarchy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementHierarchyAdapter() {
		if (elementHierarchyItemProvider == null) {
			elementHierarchyItemProvider = new ElementHierarchyItemProvider(this);
		}

		return elementHierarchyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.quamoco.adaptation.model.AttributesSettingPage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributesSettingPageItemProvider attributesSettingPageItemProvider;

	/**
	 * This creates an adapter for a {@link de.quamoco.adaptation.model.AttributesSettingPage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributesSettingPageAdapter() {
		if (attributesSettingPageItemProvider == null) {
			attributesSettingPageItemProvider = new AttributesSettingPageItemProvider(this);
		}

		return attributesSettingPageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.quamoco.adaptation.model.RemoveElementAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveElementActionItemProvider removeElementActionItemProvider;

	/**
	 * This creates an adapter for a {@link de.quamoco.adaptation.model.RemoveElementAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoveElementActionAdapter() {
		if (removeElementActionItemProvider == null) {
			removeElementActionItemProvider = new RemoveElementActionItemProvider(this);
		}

		return removeElementActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.quamoco.adaptation.model.AddTodoAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddTodoActionItemProvider addTodoActionItemProvider;

	/**
	 * This creates an adapter for a {@link de.quamoco.adaptation.model.AddTodoAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddTodoActionAdapter() {
		if (addTodoActionItemProvider == null) {
			addTodoActionItemProvider = new AddTodoActionItemProvider(this);
		}

		return addTodoActionItemProvider;
	}


	/**
	 * This keeps track of the one adapter used for all {@link de.quamoco.adaptation.model.RemoveTypeAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveTypeActionItemProvider removeTypeActionItemProvider;

	/**
	 * This creates an adapter for a {@link de.quamoco.adaptation.model.RemoveTypeAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoveTypeActionAdapter() {
		if (removeTypeActionItemProvider == null) {
			removeTypeActionItemProvider = new RemoveTypeActionItemProvider(this);
		}

		return removeTypeActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.quamoco.adaptation.model.FeatureRequiredAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureRequiredActionItemProvider featureRequiredActionItemProvider;

	/**
	 * This creates an adapter for a {@link de.quamoco.adaptation.model.FeatureRequiredAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureRequiredActionAdapter() {
		if (featureRequiredActionItemProvider == null) {
			featureRequiredActionItemProvider = new FeatureRequiredActionItemProvider(this);
		}

		return featureRequiredActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.quamoco.adaptation.model.DeleteElements} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteElementsItemProvider deleteElementsItemProvider;

	/**
	 * This creates an adapter for a {@link de.quamoco.adaptation.model.DeleteElements}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteElementsAdapter() {
		if (deleteElementsItemProvider == null) {
			deleteElementsItemProvider = new DeleteElementsItemProvider(this);
		}

		return deleteElementsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.quamoco.adaptation.model.FeatureDescriptor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureDescriptorItemProvider featureDescriptorItemProvider;

	/**
	 * This creates an adapter for a {@link de.quamoco.adaptation.model.FeatureDescriptor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureDescriptorAdapter() {
		if (featureDescriptorItemProvider == null) {
			featureDescriptorItemProvider = new FeatureDescriptorItemProvider(this);
		}

		return featureDescriptorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.quamoco.adaptation.model.FeatureRequired} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureRequiredItemProvider featureRequiredItemProvider;

	/**
	 * This creates an adapter for a {@link de.quamoco.adaptation.model.FeatureRequired}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureRequiredAdapter() {
		if (featureRequiredItemProvider == null) {
			featureRequiredItemProvider = new FeatureRequiredItemProvider(this);
		}

		return featureRequiredItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (adaptationModelItemProvider != null) adaptationModelItemProvider.dispose();
		if (wizardItemProvider != null) wizardItemProvider.dispose();
		if (adaptationElementItemProvider != null) adaptationElementItemProvider.dispose();
		if (preselectionDescriptorItemProvider != null) preselectionDescriptorItemProvider.dispose();
		if (purposeItemProvider != null) purposeItemProvider.dispose();
		if (elementHierarchyItemProvider != null) elementHierarchyItemProvider.dispose();
		if (attributesSettingPageItemProvider != null) attributesSettingPageItemProvider.dispose();
		if (removeElementActionItemProvider != null) removeElementActionItemProvider.dispose();
		if (addTodoActionItemProvider != null) addTodoActionItemProvider.dispose();
		if (removeTypeActionItemProvider != null) removeTypeActionItemProvider.dispose();
		if (featureRequiredActionItemProvider != null) featureRequiredActionItemProvider.dispose();
		if (deleteElementsItemProvider != null) deleteElementsItemProvider.dispose();
		if (featureDescriptorItemProvider != null) featureDescriptorItemProvider.dispose();
		if (featureRequiredItemProvider != null) featureRequiredItemProvider.dispose();
	}

}
