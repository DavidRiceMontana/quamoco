/*-------------------------------------------------------------------------+
|                                                                          |
| Copyright 2012 Technische Universitaet Muenchen and                      |
| Fraunhofer-Institut fuer Experimentelles Software Engineering (IESE)     |
|                                                                          |
| Licensed under the Apache License, Version 2.0 (the "License");          |
| you may not use this file except in compliance with the License.         |
| You may obtain a copy of the License at                                  |
|                                                                          |
|    http://www.apache.org/licenses/LICENSE-2.0                            |
|                                                                          |
| Unless required by applicable law or agreed to in writing, software      |
| distributed under the License is distributed on an "AS IS" BASIS,        |
| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
| See the License for the specific language governing permissions and      |
| limitations under the License.                                           |
|                                                                          |
+-------------------------------------------------------------------------*/

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.11.18 at 02:47:21 PM CET 
//


package de.quamoco.qm.docbook;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for notation.class.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="notation.class">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     &lt;enumeration value="BMP"/>
 *     &lt;enumeration value="CGM-CHAR"/>
 *     &lt;enumeration value="CGM-BINARY"/>
 *     &lt;enumeration value="CGM-CLEAR"/>
 *     &lt;enumeration value="DITROFF"/>
 *     &lt;enumeration value="DVI"/>
 *     &lt;enumeration value="EPS"/>
 *     &lt;enumeration value="EQN"/>
 *     &lt;enumeration value="FAX"/>
 *     &lt;enumeration value="GIF"/>
 *     &lt;enumeration value="GIF87a"/>
 *     &lt;enumeration value="GIF89a"/>
 *     &lt;enumeration value="JPG"/>
 *     &lt;enumeration value="JPEG"/>
 *     &lt;enumeration value="IGES"/>
 *     &lt;enumeration value="PCX"/>
 *     &lt;enumeration value="PIC"/>
 *     &lt;enumeration value="PNG"/>
 *     &lt;enumeration value="PS"/>
 *     &lt;enumeration value="SGML"/>
 *     &lt;enumeration value="TBL"/>
 *     &lt;enumeration value="TEX"/>
 *     &lt;enumeration value="TIFF"/>
 *     &lt;enumeration value="WMF"/>
 *     &lt;enumeration value="WPG"/>
 *     &lt;enumeration value="SVG"/>
 *     &lt;enumeration value="PDF"/>
 *     &lt;enumeration value="SWF"/>
 *     &lt;enumeration value="linespecific"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "notation.class")
@XmlEnum
public enum NotationClass {

    BMP("BMP"),
    @XmlEnumValue("CGM-CHAR")
    CGM_CHAR("CGM-CHAR"),
    @XmlEnumValue("CGM-BINARY")
    CGM_BINARY("CGM-BINARY"),
    @XmlEnumValue("CGM-CLEAR")
    CGM_CLEAR("CGM-CLEAR"),
    DITROFF("DITROFF"),
    DVI("DVI"),
    EPS("EPS"),
    EQN("EQN"),
    FAX("FAX"),
    GIF("GIF"),
    @XmlEnumValue("GIF87a")
    GIF_87_A("GIF87a"),
    @XmlEnumValue("GIF89a")
    GIF_89_A("GIF89a"),
    JPG("JPG"),
    JPEG("JPEG"),
    IGES("IGES"),
    PCX("PCX"),
    PIC("PIC"),
    PNG("PNG"),
    PS("PS"),
    SGML("SGML"),
    TBL("TBL"),
    TEX("TEX"),
    TIFF("TIFF"),
    WMF("WMF"),
    WPG("WPG"),
    SVG("SVG"),
    PDF("PDF"),
    SWF("SWF"),
    @XmlEnumValue("linespecific")
    LINESPECIFIC("linespecific");
    private final String value;

    NotationClass(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static NotationClass fromValue(String v) {
        for (NotationClass c: NotationClass.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
